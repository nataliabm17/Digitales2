/* Generated by Yosys 0.8+285 (git sha1 a7ac8393, clang 6.0.0-1ubuntu2 -fPIC -Os) */

(* src = "generador_synth.v:1" *)
module generador_synth(clk_8f, reset, clk_f, clk_2f);
  (* src = "generador_synth.v:10" *)
  wire _00_;
  (* src = "generador_synth.v:10" *)
  wire _01_;
  (* src = "generador_synth.v:10" *)
  wire [3:0] _02_;
  (* src = "generador_synth.v:10" *)
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  (* src = "generador_synth.v:5" *)
  output clk_2f;
  (* src = "generador_synth.v:2" *)
  input clk_8f;
  (* src = "generador_synth.v:4" *)
  output clk_f;
  (* src = "generador_synth.v:7" *)
  wire [1:0] contador;
  (* src = "generador_synth.v:8" *)
  wire [3:0] contador2;
  (* src = "generador_synth.v:3" *)
  input reset;
  NOT _30_ (
    .A(contador2[2]),
    .Y(_04_)
  );
  NOT _31_ (
    .A(reset),
    .Y(_05_)
  );
  NOR _32_ (
    .A(contador2[0]),
    .B(_05_),
    .Y(_02_[0])
  );
  NOR _33_ (
    .A(contador2[0]),
    .B(contador2[1]),
    .Y(_06_)
  );
  NOT _34_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _35_ (
    .A(contador2[0]),
    .B(contador2[1]),
    .Y(_08_)
  );
  NAND _36_ (
    .A(reset),
    .B(_08_),
    .Y(_09_)
  );
  NOR _37_ (
    .A(_06_),
    .B(_09_),
    .Y(_02_[1])
  );
  NOR _38_ (
    .A(contador2[3]),
    .B(_07_),
    .Y(_10_)
  );
  NOT _39_ (
    .A(_10_),
    .Y(_11_)
  );
  NAND _40_ (
    .A(reset),
    .B(_11_),
    .Y(_12_)
  );
  NOR _41_ (
    .A(_04_),
    .B(_08_),
    .Y(_13_)
  );
  NOT _42_ (
    .A(_13_),
    .Y(_14_)
  );
  NAND _43_ (
    .A(_04_),
    .B(_08_),
    .Y(_15_)
  );
  NAND _44_ (
    .A(_14_),
    .B(_15_),
    .Y(_16_)
  );
  NOR _45_ (
    .A(_12_),
    .B(_16_),
    .Y(_02_[2])
  );
  NOR _46_ (
    .A(contador2[3]),
    .B(_13_),
    .Y(_17_)
  );
  NAND _47_ (
    .A(contador2[3]),
    .B(_13_),
    .Y(_18_)
  );
  NAND _48_ (
    .A(reset),
    .B(_18_),
    .Y(_19_)
  );
  NOR _49_ (
    .A(_17_),
    .B(_19_),
    .Y(_02_[3])
  );
  NOR _50_ (
    .A(contador[0]),
    .B(clk_2f),
    .Y(_20_)
  );
  NAND _51_ (
    .A(contador[0]),
    .B(clk_2f),
    .Y(_21_)
  );
  NOT _52_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _53_ (
    .A(_20_),
    .B(_22_),
    .Y(_23_)
  );
  NOR _54_ (
    .A(_05_),
    .B(_23_),
    .Y(_00_)
  );
  NOR _55_ (
    .A(contador[0]),
    .B(_05_),
    .Y(_03_[0])
  );
  NOR _56_ (
    .A(contador[0]),
    .B(contador[1]),
    .Y(_24_)
  );
  NAND _57_ (
    .A(contador[0]),
    .B(contador[1]),
    .Y(_25_)
  );
  NAND _58_ (
    .A(reset),
    .B(_25_),
    .Y(_26_)
  );
  NOR _59_ (
    .A(_24_),
    .B(_26_),
    .Y(_03_[1])
  );
  NOR _60_ (
    .A(clk_f),
    .B(_10_),
    .Y(_27_)
  );
  NAND _61_ (
    .A(clk_f),
    .B(_10_),
    .Y(_28_)
  );
  NAND _62_ (
    .A(reset),
    .B(_28_),
    .Y(_29_)
  );
  NOR _63_ (
    .A(_27_),
    .B(_29_),
    .Y(_01_)
  );
  (* src = "generador_synth.v:10" *)
  DFF _64_ (
    .C(clk_8f),
    .D(_01_),
    .Q(clk_f)
  );
  (* src = "generador_synth.v:10" *)
  DFF _65_ (
    .C(clk_8f),
    .D(_00_),
    .Q(clk_2f)
  );
  (* src = "generador_synth.v:10" *)
  DFF _66_ (
    .C(clk_8f),
    .D(_03_[0]),
    .Q(contador[0])
  );
  (* src = "generador_synth.v:10" *)
  DFF _67_ (
    .C(clk_8f),
    .D(_03_[1]),
    .Q(contador[1])
  );
  (* src = "generador_synth.v:10" *)
  DFF _68_ (
    .C(clk_8f),
    .D(_02_[0]),
    .Q(contador2[0])
  );
  (* src = "generador_synth.v:10" *)
  DFF _69_ (
    .C(clk_8f),
    .D(_02_[1]),
    .Q(contador2[1])
  );
  (* src = "generador_synth.v:10" *)
  DFF _70_ (
    .C(clk_8f),
    .D(_02_[2]),
    .Q(contador2[2])
  );
  (* src = "generador_synth.v:10" *)
  DFF _71_ (
    .C(clk_8f),
    .D(_02_[3]),
    .Q(contador2[3])
  );
endmodule

(* src = "p2s_synth.v:1" *)
module p2s_synth(data_inP, reset, clk_8f, clk_f, valid_in, data2send, data_outS);
  (* src = "p2s_synth.v:51" *)
  wire [7:0] _000_;
  (* src = "p2s_synth.v:51" *)
  wire _001_;
  (* src = "p2s_synth.v:51" *)
  wire [2:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  (* src = "p2s_synth.v:4" *)
  input clk_8f;
  (* src = "p2s_synth.v:5" *)
  input clk_f;
  (* src = "p2s_synth.v:7" *)
  output [7:0] data2send;
  (* src = "p2s_synth.v:2" *)
  input [7:0] data_inP;
  (* src = "p2s_synth.v:8" *)
  output data_outS;
  (* src = "p2s_synth.v:10" *)
  wire [2:0] out44;
  (* src = "p2s_synth.v:3" *)
  input reset;
  (* src = "p2s_synth.v:6" *)
  input valid_in;
  NOT _049_ (
    .A(reset),
    .Y(_003_)
  );
  NOT _050_ (
    .A(data_inP[0]),
    .Y(_004_)
  );
  NOT _051_ (
    .A(valid_in),
    .Y(_005_)
  );
  NOT _052_ (
    .A(data_inP[1]),
    .Y(_006_)
  );
  NOT _053_ (
    .A(data_inP[6]),
    .Y(_007_)
  );
  NOT _054_ (
    .A(out44[2]),
    .Y(_008_)
  );
  NOT _055_ (
    .A(data2send[2]),
    .Y(_009_)
  );
  NOT _056_ (
    .A(data2send[3]),
    .Y(_010_)
  );
  NOT _057_ (
    .A(out44[0]),
    .Y(_011_)
  );
  NAND _058_ (
    .A(out44[1]),
    .B(out44[0]),
    .Y(_012_)
  );
  NOT _059_ (
    .A(_012_),
    .Y(_013_)
  );
  NOR _060_ (
    .A(out44[1]),
    .B(out44[0]),
    .Y(_014_)
  );
  NOR _061_ (
    .A(_013_),
    .B(_014_),
    .Y(_015_)
  );
  NOR _062_ (
    .A(_003_),
    .B(_015_),
    .Y(_002_[1])
  );
  NAND _063_ (
    .A(out44[2]),
    .B(_014_),
    .Y(_016_)
  );
  NOT _064_ (
    .A(_016_),
    .Y(_017_)
  );
  NOR _065_ (
    .A(out44[2]),
    .B(_014_),
    .Y(_018_)
  );
  NOT _066_ (
    .A(_018_),
    .Y(_019_)
  );
  NAND _067_ (
    .A(reset),
    .B(_019_),
    .Y(_020_)
  );
  NOR _068_ (
    .A(_017_),
    .B(_020_),
    .Y(_002_[2])
  );
  NAND _069_ (
    .A(out44[2]),
    .B(data2send[7]),
    .Y(_021_)
  );
  NOR _070_ (
    .A(out44[2]),
    .B(_010_),
    .Y(_022_)
  );
  NAND _071_ (
    .A(out44[2]),
    .B(data2send[6]),
    .Y(_023_)
  );
  NOT _072_ (
    .A(_023_),
    .Y(_024_)
  );
  NOR _073_ (
    .A(out44[2]),
    .B(_009_),
    .Y(_025_)
  );
  NOR _074_ (
    .A(_024_),
    .B(_025_),
    .Y(_026_)
  );
  NOR _075_ (
    .A(_011_),
    .B(_022_),
    .Y(_027_)
  );
  NAND _076_ (
    .A(_021_),
    .B(_027_),
    .Y(_028_)
  );
  NAND _077_ (
    .A(_011_),
    .B(_026_),
    .Y(_029_)
  );
  NAND _078_ (
    .A(_028_),
    .B(_029_),
    .Y(_030_)
  );
  NAND _079_ (
    .A(out44[2]),
    .B(data2send[5]),
    .Y(_031_)
  );
  NAND _080_ (
    .A(_008_),
    .B(data2send[1]),
    .Y(_032_)
  );
  NAND _081_ (
    .A(_031_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _082_ (
    .A(out44[0]),
    .B(_033_),
    .Y(_034_)
  );
  NAND _083_ (
    .A(data2send[4]),
    .B(out44[2]),
    .Y(_035_)
  );
  NAND _084_ (
    .A(data2send[0]),
    .B(_008_),
    .Y(_036_)
  );
  NAND _085_ (
    .A(_035_),
    .B(_036_),
    .Y(_037_)
  );
  NAND _086_ (
    .A(_011_),
    .B(_037_),
    .Y(_038_)
  );
  NAND _087_ (
    .A(_034_),
    .B(_038_),
    .Y(_039_)
  );
  NOR _088_ (
    .A(out44[1]),
    .B(_039_),
    .Y(_040_)
  );
  NAND _089_ (
    .A(out44[1]),
    .B(_030_),
    .Y(_041_)
  );
  NAND _090_ (
    .A(reset),
    .B(_041_),
    .Y(_042_)
  );
  NOR _091_ (
    .A(_040_),
    .B(_042_),
    .Y(_001_)
  );
  NAND _092_ (
    .A(reset),
    .B(valid_in),
    .Y(_043_)
  );
  NOR _093_ (
    .A(_004_),
    .B(_043_),
    .Y(_000_[0])
  );
  NOR _094_ (
    .A(_006_),
    .B(_043_),
    .Y(_000_[1])
  );
  NOR _095_ (
    .A(_005_),
    .B(data_inP[2]),
    .Y(_044_)
  );
  NOR _096_ (
    .A(_003_),
    .B(_044_),
    .Y(_000_[2])
  );
  NOR _097_ (
    .A(_005_),
    .B(data_inP[3]),
    .Y(_045_)
  );
  NOR _098_ (
    .A(_003_),
    .B(_045_),
    .Y(_000_[3])
  );
  NOR _099_ (
    .A(_005_),
    .B(data_inP[4]),
    .Y(_046_)
  );
  NOR _100_ (
    .A(_003_),
    .B(_046_),
    .Y(_000_[4])
  );
  NOR _101_ (
    .A(_005_),
    .B(data_inP[5]),
    .Y(_047_)
  );
  NOR _102_ (
    .A(_003_),
    .B(_047_),
    .Y(_000_[5])
  );
  NOR _103_ (
    .A(_007_),
    .B(_043_),
    .Y(_000_[6])
  );
  NOR _104_ (
    .A(_005_),
    .B(data_inP[7]),
    .Y(_048_)
  );
  NOR _105_ (
    .A(_003_),
    .B(_048_),
    .Y(_000_[7])
  );
  NOR _106_ (
    .A(_003_),
    .B(out44[0]),
    .Y(_002_[0])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _107_ (
    .C(clk_8f),
    .D(_000_[0]),
    .Q(data2send[0])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _108_ (
    .C(clk_8f),
    .D(_000_[1]),
    .Q(data2send[1])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _109_ (
    .C(clk_8f),
    .D(_000_[2]),
    .Q(data2send[2])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _110_ (
    .C(clk_8f),
    .D(_000_[3]),
    .Q(data2send[3])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _111_ (
    .C(clk_8f),
    .D(_000_[4]),
    .Q(data2send[4])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _112_ (
    .C(clk_8f),
    .D(_000_[5]),
    .Q(data2send[5])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _113_ (
    .C(clk_8f),
    .D(_000_[6]),
    .Q(data2send[6])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _114_ (
    .C(clk_8f),
    .D(_000_[7]),
    .Q(data2send[7])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _115_ (
    .C(clk_8f),
    .D(_001_),
    .Q(data_outS)
  );
  (* src = "p2s_synth.v:51" *)
  DFF _116_ (
    .C(clk_8f),
    .D(_002_[0]),
    .Q(out44[0])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _117_ (
    .C(clk_8f),
    .D(_002_[1]),
    .Q(out44[1])
  );
  (* src = "p2s_synth.v:51" *)
  DFF _118_ (
    .C(clk_8f),
    .D(_002_[2]),
    .Q(out44[2])
  );
endmodule

(* src = "s2p_synth.v:2" *)
module s2p_synth(clk_f, clk_8f, data_in, reset, data2send, BC_counter, valid_out, active);
  (* src = "s2p_synth.v:27" *)
  wire [3:0] _000_;
  (* src = "s2p_synth.v:19" *)
  wire [2:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  (* src = "s2p_synth.v:8" *)
  output [3:0] BC_counter;
  (* src = "s2p_synth.v:10" *)
  output active;
  (* src = "s2p_synth.v:15" *)
  wire activeF;
  (* src = "s2p_synth.v:4" *)
  input clk_8f;
  (* src = "s2p_synth.v:3" *)
  input clk_f;
  (* src = "s2p_synth.v:12" *)
  wire [2:0] contadorF;
  (* src = "s2p_synth.v:7" *)
  output [7:0] data2send;
  (* src = "s2p_synth.v:5" *)
  input data_in;
  (* src = "s2p_synth.v:13" *)
  wire [7:0] pasoInSend;
  (* src = "s2p_synth.v:13" *)
  wire [7:0] pasoInSendF;
  (* src = "s2p_synth.v:6" *)
  input reset;
  (* src = "s2p_synth.v:9" *)
  output valid_out;
  NOT _105_ (
    .A(BC_counter[0]),
    .Y(_055_)
  );
  NOT _106_ (
    .A(BC_counter[1]),
    .Y(_056_)
  );
  NOT _107_ (
    .A(BC_counter[3]),
    .Y(_057_)
  );
  NOT _108_ (
    .A(data2send[6]),
    .Y(_058_)
  );
  NOT _109_ (
    .A(contadorF[2]),
    .Y(_059_)
  );
  NOT _110_ (
    .A(contadorF[0]),
    .Y(_060_)
  );
  NOT _111_ (
    .A(reset),
    .Y(_061_)
  );
  NOT _112_ (
    .A(BC_counter[2]),
    .Y(_062_)
  );
  NOT _113_ (
    .A(data_in),
    .Y(_063_)
  );
  NOT _114_ (
    .A(pasoInSendF[5]),
    .Y(_064_)
  );
  NOT _115_ (
    .A(pasoInSendF[1]),
    .Y(_065_)
  );
  NOT _116_ (
    .A(pasoInSendF[7]),
    .Y(_066_)
  );
  NOT _117_ (
    .A(pasoInSendF[4]),
    .Y(_067_)
  );
  NOR _118_ (
    .A(contadorF[0]),
    .B(contadorF[1]),
    .Y(_068_)
  );
  NOT _119_ (
    .A(_068_),
    .Y(_069_)
  );
  NOR _120_ (
    .A(contadorF[2]),
    .B(_069_),
    .Y(_070_)
  );
  NOR _121_ (
    .A(pasoInSendF[0]),
    .B(_070_),
    .Y(_071_)
  );
  NAND _122_ (
    .A(_063_),
    .B(_070_),
    .Y(_072_)
  );
  NAND _123_ (
    .A(reset),
    .B(_072_),
    .Y(_073_)
  );
  NOR _124_ (
    .A(_071_),
    .B(_073_),
    .Y(pasoInSend[0])
  );
  NOR _125_ (
    .A(_060_),
    .B(contadorF[1]),
    .Y(_074_)
  );
  NAND _126_ (
    .A(_059_),
    .B(_074_),
    .Y(_075_)
  );
  NAND _127_ (
    .A(_065_),
    .B(_075_),
    .Y(_076_)
  );
  NOR _128_ (
    .A(data_in),
    .B(_075_),
    .Y(_077_)
  );
  NAND _129_ (
    .A(reset),
    .B(_076_),
    .Y(_078_)
  );
  NOR _130_ (
    .A(_077_),
    .B(_078_),
    .Y(pasoInSend[1])
  );
  NAND _131_ (
    .A(_060_),
    .B(contadorF[1]),
    .Y(_079_)
  );
  NOR _132_ (
    .A(_059_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _133_ (
    .A(pasoInSendF[6]),
    .B(_080_),
    .Y(_081_)
  );
  NAND _134_ (
    .A(_063_),
    .B(_080_),
    .Y(_082_)
  );
  NAND _135_ (
    .A(reset),
    .B(_082_),
    .Y(_083_)
  );
  NOR _136_ (
    .A(_081_),
    .B(_083_),
    .Y(pasoInSend[6])
  );
  NOT _137_ (
    .A(pasoInSend[6]),
    .Y(_084_)
  );
  NAND _138_ (
    .A(data2send[3]),
    .B(data2send[4]),
    .Y(_085_)
  );
  NAND _139_ (
    .A(data2send[5]),
    .B(data2send[7]),
    .Y(_086_)
  );
  NOR _140_ (
    .A(_085_),
    .B(_086_),
    .Y(_087_)
  );
  NOR _141_ (
    .A(data2send[0]),
    .B(data2send[1]),
    .Y(_088_)
  );
  NOT _142_ (
    .A(_088_),
    .Y(_089_)
  );
  NAND _143_ (
    .A(_058_),
    .B(data2send[2]),
    .Y(_090_)
  );
  NOR _144_ (
    .A(_089_),
    .B(_090_),
    .Y(_091_)
  );
  NAND _145_ (
    .A(_087_),
    .B(_091_),
    .Y(_092_)
  );
  NOR _146_ (
    .A(BC_counter[0]),
    .B(BC_counter[1]),
    .Y(_093_)
  );
  NOR _147_ (
    .A(BC_counter[3]),
    .B(_062_),
    .Y(_094_)
  );
  NAND _148_ (
    .A(_093_),
    .B(_094_),
    .Y(_095_)
  );
  NOT _149_ (
    .A(_095_),
    .Y(_096_)
  );
  NAND _150_ (
    .A(reset),
    .B(_092_),
    .Y(_097_)
  );
  NOR _151_ (
    .A(_095_),
    .B(_097_),
    .Y(valid_out)
  );
  NOR _152_ (
    .A(activeF),
    .B(_096_),
    .Y(_098_)
  );
  NOR _153_ (
    .A(_061_),
    .B(_098_),
    .Y(active)
  );
  NOR _154_ (
    .A(contadorF[2]),
    .B(_079_),
    .Y(_099_)
  );
  NOR _155_ (
    .A(pasoInSendF[2]),
    .B(_099_),
    .Y(_100_)
  );
  NAND _156_ (
    .A(_063_),
    .B(_099_),
    .Y(_101_)
  );
  NOR _157_ (
    .A(_061_),
    .B(_100_),
    .Y(_102_)
  );
  NAND _158_ (
    .A(_101_),
    .B(_102_),
    .Y(_103_)
  );
  NOT _159_ (
    .A(_103_),
    .Y(pasoInSend[2])
  );
  NAND _160_ (
    .A(contadorF[0]),
    .B(contadorF[1]),
    .Y(_104_)
  );
  NOT _161_ (
    .A(_104_),
    .Y(_002_)
  );
  NOR _162_ (
    .A(contadorF[2]),
    .B(_104_),
    .Y(_003_)
  );
  NOR _163_ (
    .A(pasoInSendF[3]),
    .B(_003_),
    .Y(_004_)
  );
  NAND _164_ (
    .A(_063_),
    .B(_003_),
    .Y(_005_)
  );
  NAND _165_ (
    .A(reset),
    .B(_005_),
    .Y(_006_)
  );
  NOR _166_ (
    .A(_004_),
    .B(_006_),
    .Y(pasoInSend[3])
  );
  NAND _167_ (
    .A(contadorF[2]),
    .B(_068_),
    .Y(_007_)
  );
  NAND _168_ (
    .A(_067_),
    .B(_007_),
    .Y(_008_)
  );
  NOR _169_ (
    .A(data_in),
    .B(_007_),
    .Y(_009_)
  );
  NAND _170_ (
    .A(reset),
    .B(_008_),
    .Y(_010_)
  );
  NOR _171_ (
    .A(_009_),
    .B(_010_),
    .Y(pasoInSend[4])
  );
  NAND _172_ (
    .A(contadorF[2]),
    .B(_074_),
    .Y(_011_)
  );
  NAND _173_ (
    .A(_064_),
    .B(_011_),
    .Y(_012_)
  );
  NOR _174_ (
    .A(data_in),
    .B(_011_),
    .Y(_013_)
  );
  NOR _175_ (
    .A(_061_),
    .B(_013_),
    .Y(_014_)
  );
  NAND _176_ (
    .A(_012_),
    .B(_014_),
    .Y(_015_)
  );
  NOT _177_ (
    .A(_015_),
    .Y(pasoInSend[5])
  );
  NAND _178_ (
    .A(contadorF[2]),
    .B(_002_),
    .Y(_016_)
  );
  NAND _179_ (
    .A(_066_),
    .B(_016_),
    .Y(_017_)
  );
  NOR _180_ (
    .A(data_in),
    .B(_016_),
    .Y(_018_)
  );
  NOR _181_ (
    .A(_061_),
    .B(_018_),
    .Y(_019_)
  );
  NAND _182_ (
    .A(_017_),
    .B(_019_),
    .Y(_020_)
  );
  NOT _183_ (
    .A(_020_),
    .Y(pasoInSend[7])
  );
  NAND _184_ (
    .A(pasoInSend[3]),
    .B(pasoInSend[4]),
    .Y(_021_)
  );
  NOT _185_ (
    .A(_021_),
    .Y(_022_)
  );
  NOR _186_ (
    .A(_015_),
    .B(_020_),
    .Y(_023_)
  );
  NAND _187_ (
    .A(pasoInSend[5]),
    .B(pasoInSend[7]),
    .Y(_024_)
  );
  NOR _188_ (
    .A(_021_),
    .B(_024_),
    .Y(_025_)
  );
  NAND _189_ (
    .A(_022_),
    .B(_023_),
    .Y(_026_)
  );
  NOR _190_ (
    .A(pasoInSend[0]),
    .B(pasoInSend[1]),
    .Y(_027_)
  );
  NOT _191_ (
    .A(_027_),
    .Y(_028_)
  );
  NOR _192_ (
    .A(pasoInSend[6]),
    .B(_103_),
    .Y(_029_)
  );
  NAND _193_ (
    .A(_084_),
    .B(pasoInSend[2]),
    .Y(_030_)
  );
  NOR _194_ (
    .A(_028_),
    .B(_030_),
    .Y(_031_)
  );
  NAND _195_ (
    .A(_027_),
    .B(_029_),
    .Y(_032_)
  );
  NOR _196_ (
    .A(_026_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _197_ (
    .A(_025_),
    .B(_031_),
    .Y(_034_)
  );
  NOR _198_ (
    .A(_055_),
    .B(_034_),
    .Y(_035_)
  );
  NAND _199_ (
    .A(BC_counter[0]),
    .B(_033_),
    .Y(_036_)
  );
  NAND _200_ (
    .A(_055_),
    .B(_034_),
    .Y(_037_)
  );
  NAND _201_ (
    .A(reset),
    .B(_037_),
    .Y(_038_)
  );
  NOR _202_ (
    .A(_035_),
    .B(_038_),
    .Y(_000_[0])
  );
  NOR _203_ (
    .A(_056_),
    .B(_036_),
    .Y(_039_)
  );
  NAND _204_ (
    .A(BC_counter[1]),
    .B(_035_),
    .Y(_040_)
  );
  NOR _205_ (
    .A(BC_counter[1]),
    .B(_035_),
    .Y(_041_)
  );
  NOR _206_ (
    .A(_061_),
    .B(_041_),
    .Y(_042_)
  );
  NAND _207_ (
    .A(_040_),
    .B(_042_),
    .Y(_043_)
  );
  NOT _208_ (
    .A(_043_),
    .Y(_000_[1])
  );
  NOR _209_ (
    .A(BC_counter[2]),
    .B(_039_),
    .Y(_044_)
  );
  NOR _210_ (
    .A(_095_),
    .B(_034_),
    .Y(_045_)
  );
  NOR _211_ (
    .A(_061_),
    .B(_045_),
    .Y(_046_)
  );
  NAND _212_ (
    .A(BC_counter[2]),
    .B(_039_),
    .Y(_047_)
  );
  NAND _213_ (
    .A(_046_),
    .B(_047_),
    .Y(_048_)
  );
  NOR _214_ (
    .A(_044_),
    .B(_048_),
    .Y(_000_[2])
  );
  NOR _215_ (
    .A(_057_),
    .B(_047_),
    .Y(_049_)
  );
  NAND _216_ (
    .A(_057_),
    .B(_047_),
    .Y(_050_)
  );
  NAND _217_ (
    .A(reset),
    .B(_050_),
    .Y(_051_)
  );
  NOR _218_ (
    .A(_049_),
    .B(_051_),
    .Y(_000_[3])
  );
  NAND _219_ (
    .A(contadorF[0]),
    .B(reset),
    .Y(_001_[0])
  );
  NOR _220_ (
    .A(_061_),
    .B(_068_),
    .Y(_052_)
  );
  NAND _221_ (
    .A(_104_),
    .B(_052_),
    .Y(_001_[1])
  );
  NAND _222_ (
    .A(contadorF[2]),
    .B(_069_),
    .Y(_053_)
  );
  NOR _223_ (
    .A(_061_),
    .B(_070_),
    .Y(_054_)
  );
  NAND _224_ (
    .A(_053_),
    .B(_054_),
    .Y(_001_[2])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _225_ (
    .C(clk_f),
    .D(pasoInSend[0]),
    .Q(data2send[0])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _226_ (
    .C(clk_f),
    .D(pasoInSend[1]),
    .Q(data2send[1])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _227_ (
    .C(clk_f),
    .D(pasoInSend[2]),
    .Q(data2send[2])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _228_ (
    .C(clk_f),
    .D(pasoInSend[3]),
    .Q(data2send[3])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _229_ (
    .C(clk_f),
    .D(pasoInSend[4]),
    .Q(data2send[4])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _230_ (
    .C(clk_f),
    .D(pasoInSend[5]),
    .Q(data2send[5])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _231_ (
    .C(clk_f),
    .D(pasoInSend[6]),
    .Q(data2send[6])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _232_ (
    .C(clk_f),
    .D(pasoInSend[7]),
    .Q(data2send[7])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _233_ (
    .C(clk_f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _234_ (
    .C(clk_f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _235_ (
    .C(clk_f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "s2p_synth.v:27" *)
  DFF _236_ (
    .C(clk_f),
    .D(_000_[3]),
    .Q(BC_counter[3])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _237_ (
    .C(clk_8f),
    .D(active),
    .Q(activeF)
  );
  (* src = "s2p_synth.v:19" *)
  DFF _238_ (
    .C(clk_8f),
    .D(pasoInSend[0]),
    .Q(pasoInSendF[0])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _239_ (
    .C(clk_8f),
    .D(pasoInSend[1]),
    .Q(pasoInSendF[1])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _240_ (
    .C(clk_8f),
    .D(pasoInSend[2]),
    .Q(pasoInSendF[2])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _241_ (
    .C(clk_8f),
    .D(pasoInSend[3]),
    .Q(pasoInSendF[3])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _242_ (
    .C(clk_8f),
    .D(pasoInSend[4]),
    .Q(pasoInSendF[4])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _243_ (
    .C(clk_8f),
    .D(pasoInSend[5]),
    .Q(pasoInSendF[5])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _244_ (
    .C(clk_8f),
    .D(pasoInSend[6]),
    .Q(pasoInSendF[6])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _245_ (
    .C(clk_8f),
    .D(pasoInSend[7]),
    .Q(pasoInSendF[7])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _246_ (
    .C(clk_8f),
    .D(_001_[0]),
    .Q(contadorF[0])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _247_ (
    .C(clk_8f),
    .D(_001_[1]),
    .Q(contadorF[1])
  );
  (* src = "s2p_synth.v:19" *)
  DFF _248_ (
    .C(clk_8f),
    .D(_001_[2]),
    .Q(contadorF[2])
  );
endmodule

(* src = "byte_striping_synth.v:1" *)
module byte_striping_synth(clk_2f, clk_f, valid_in, data_in, reset, lane_0, lane_1, valid_0, valid_1);
  (* src = "byte_striping_synth.v:51" *)
  wire _000_;
  (* src = "byte_striping_synth.v:51" *)
  wire _001_;
  (* src = "byte_striping_synth.v:51" *)
  wire [7:0] _002_;
  (* src = "byte_striping_synth.v:51" *)
  wire [7:0] _003_;
  (* src = "byte_striping_synth.v:38" *)
  wire _004_;
  (* src = "byte_striping_synth.v:23" *)
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  (* src = "byte_striping_synth.v:2" *)
  input clk_2f;
  (* src = "byte_striping_synth.v:3" *)
  input clk_f;
  (* src = "byte_striping_synth.v:12" *)
  wire contador0;
  (* src = "byte_striping_synth.v:12" *)
  wire contador1;
  (* src = "byte_striping_synth.v:5" *)
  input [7:0] data_in;
  (* src = "byte_striping_synth.v:7" *)
  output [7:0] lane_0;
  (* src = "byte_striping_synth.v:8" *)
  output [7:0] lane_1;
  (* src = "byte_striping_synth.v:6" *)
  input reset;
  (* src = "byte_striping_synth.v:9" *)
  output valid_0;
  (* src = "byte_striping_synth.v:10" *)
  output valid_1;
  (* src = "byte_striping_synth.v:4" *)
  input valid_in;
  NOT _087_ (
    .A(clk_f),
    .Y(_006_)
  );
  NOT _088_ (
    .A(valid_in),
    .Y(_045_)
  );
  NOT _089_ (
    .A(data_in[0]),
    .Y(_046_)
  );
  NOT _090_ (
    .A(data_in[1]),
    .Y(_047_)
  );
  NOT _091_ (
    .A(data_in[2]),
    .Y(_048_)
  );
  NOT _092_ (
    .A(data_in[3]),
    .Y(_049_)
  );
  NOT _093_ (
    .A(data_in[4]),
    .Y(_050_)
  );
  NOT _094_ (
    .A(data_in[5]),
    .Y(_051_)
  );
  NOT _095_ (
    .A(data_in[6]),
    .Y(_052_)
  );
  NOT _096_ (
    .A(data_in[7]),
    .Y(_053_)
  );
  NOT _097_ (
    .A(lane_1[0]),
    .Y(_054_)
  );
  NOT _098_ (
    .A(lane_1[1]),
    .Y(_055_)
  );
  NOT _099_ (
    .A(lane_1[2]),
    .Y(_056_)
  );
  NOT _100_ (
    .A(lane_1[3]),
    .Y(_057_)
  );
  NOT _101_ (
    .A(lane_1[4]),
    .Y(_058_)
  );
  NOT _102_ (
    .A(lane_1[5]),
    .Y(_059_)
  );
  NOT _103_ (
    .A(lane_1[6]),
    .Y(_060_)
  );
  NOT _104_ (
    .A(lane_1[7]),
    .Y(_061_)
  );
  NOT _105_ (
    .A(reset),
    .Y(_062_)
  );
  NOT _106_ (
    .A(contador1),
    .Y(_063_)
  );
  NOT _107_ (
    .A(contador0),
    .Y(_064_)
  );
  NOR _108_ (
    .A(contador1),
    .B(_064_),
    .Y(_065_)
  );
  NOR _109_ (
    .A(_045_),
    .B(_065_),
    .Y(_066_)
  );
  NOR _110_ (
    .A(lane_0[0]),
    .B(_066_),
    .Y(_067_)
  );
  NAND _111_ (
    .A(_046_),
    .B(_066_),
    .Y(_068_)
  );
  NAND _112_ (
    .A(reset),
    .B(_068_),
    .Y(_069_)
  );
  NOR _113_ (
    .A(_067_),
    .B(_069_),
    .Y(_002_[0])
  );
  NOR _114_ (
    .A(lane_0[1]),
    .B(_066_),
    .Y(_070_)
  );
  NAND _115_ (
    .A(_047_),
    .B(_066_),
    .Y(_071_)
  );
  NAND _116_ (
    .A(reset),
    .B(_071_),
    .Y(_072_)
  );
  NOR _117_ (
    .A(_070_),
    .B(_072_),
    .Y(_002_[1])
  );
  NOR _118_ (
    .A(lane_0[2]),
    .B(_066_),
    .Y(_073_)
  );
  NAND _119_ (
    .A(_048_),
    .B(_066_),
    .Y(_074_)
  );
  NAND _120_ (
    .A(reset),
    .B(_074_),
    .Y(_075_)
  );
  NOR _121_ (
    .A(_073_),
    .B(_075_),
    .Y(_002_[2])
  );
  NOR _122_ (
    .A(lane_0[3]),
    .B(_066_),
    .Y(_076_)
  );
  NAND _123_ (
    .A(_049_),
    .B(_066_),
    .Y(_077_)
  );
  NAND _124_ (
    .A(reset),
    .B(_077_),
    .Y(_078_)
  );
  NOR _125_ (
    .A(_076_),
    .B(_078_),
    .Y(_002_[3])
  );
  NOR _126_ (
    .A(lane_0[4]),
    .B(_066_),
    .Y(_079_)
  );
  NAND _127_ (
    .A(_050_),
    .B(_066_),
    .Y(_080_)
  );
  NAND _128_ (
    .A(reset),
    .B(_080_),
    .Y(_081_)
  );
  NOR _129_ (
    .A(_079_),
    .B(_081_),
    .Y(_002_[4])
  );
  NOR _130_ (
    .A(lane_0[5]),
    .B(_066_),
    .Y(_082_)
  );
  NAND _131_ (
    .A(_051_),
    .B(_066_),
    .Y(_083_)
  );
  NAND _132_ (
    .A(reset),
    .B(_083_),
    .Y(_084_)
  );
  NOR _133_ (
    .A(_082_),
    .B(_084_),
    .Y(_002_[5])
  );
  NOR _134_ (
    .A(lane_0[6]),
    .B(_066_),
    .Y(_085_)
  );
  NAND _135_ (
    .A(_052_),
    .B(_066_),
    .Y(_086_)
  );
  NAND _136_ (
    .A(reset),
    .B(_086_),
    .Y(_007_)
  );
  NOR _137_ (
    .A(_085_),
    .B(_007_),
    .Y(_002_[6])
  );
  NOR _138_ (
    .A(lane_0[7]),
    .B(_066_),
    .Y(_008_)
  );
  NAND _139_ (
    .A(_053_),
    .B(_066_),
    .Y(_009_)
  );
  NAND _140_ (
    .A(reset),
    .B(_009_),
    .Y(_010_)
  );
  NOR _141_ (
    .A(_008_),
    .B(_010_),
    .Y(_002_[7])
  );
  NAND _142_ (
    .A(valid_in),
    .B(reset),
    .Y(_011_)
  );
  NOR _143_ (
    .A(contador0),
    .B(_011_),
    .Y(_004_)
  );
  NOR _144_ (
    .A(_045_),
    .B(contador1),
    .Y(_012_)
  );
  NAND _145_ (
    .A(valid_in),
    .B(_063_),
    .Y(_013_)
  );
  NAND _146_ (
    .A(valid_in),
    .B(contador0),
    .Y(_014_)
  );
  NOT _147_ (
    .A(_014_),
    .Y(_015_)
  );
  NOR _148_ (
    .A(_012_),
    .B(_015_),
    .Y(_016_)
  );
  NOR _149_ (
    .A(data_in[0]),
    .B(_016_),
    .Y(_017_)
  );
  NAND _150_ (
    .A(_054_),
    .B(_016_),
    .Y(_018_)
  );
  NAND _151_ (
    .A(reset),
    .B(_018_),
    .Y(_019_)
  );
  NOR _152_ (
    .A(_017_),
    .B(_019_),
    .Y(_003_[0])
  );
  NOR _153_ (
    .A(data_in[1]),
    .B(_016_),
    .Y(_020_)
  );
  NAND _154_ (
    .A(_055_),
    .B(_016_),
    .Y(_021_)
  );
  NAND _155_ (
    .A(reset),
    .B(_021_),
    .Y(_022_)
  );
  NOR _156_ (
    .A(_020_),
    .B(_022_),
    .Y(_003_[1])
  );
  NOR _157_ (
    .A(data_in[2]),
    .B(_016_),
    .Y(_023_)
  );
  NAND _158_ (
    .A(_056_),
    .B(_016_),
    .Y(_024_)
  );
  NAND _159_ (
    .A(reset),
    .B(_024_),
    .Y(_025_)
  );
  NOR _160_ (
    .A(_023_),
    .B(_025_),
    .Y(_003_[2])
  );
  NOR _161_ (
    .A(data_in[3]),
    .B(_016_),
    .Y(_026_)
  );
  NAND _162_ (
    .A(_057_),
    .B(_016_),
    .Y(_027_)
  );
  NAND _163_ (
    .A(reset),
    .B(_027_),
    .Y(_028_)
  );
  NOR _164_ (
    .A(_026_),
    .B(_028_),
    .Y(_003_[3])
  );
  NOR _165_ (
    .A(data_in[4]),
    .B(_016_),
    .Y(_029_)
  );
  NAND _166_ (
    .A(_058_),
    .B(_016_),
    .Y(_030_)
  );
  NAND _167_ (
    .A(reset),
    .B(_030_),
    .Y(_031_)
  );
  NOR _168_ (
    .A(_029_),
    .B(_031_),
    .Y(_003_[4])
  );
  NOR _169_ (
    .A(data_in[5]),
    .B(_016_),
    .Y(_032_)
  );
  NAND _170_ (
    .A(_059_),
    .B(_016_),
    .Y(_033_)
  );
  NAND _171_ (
    .A(reset),
    .B(_033_),
    .Y(_034_)
  );
  NOR _172_ (
    .A(_032_),
    .B(_034_),
    .Y(_003_[5])
  );
  NOR _173_ (
    .A(data_in[6]),
    .B(_016_),
    .Y(_035_)
  );
  NAND _174_ (
    .A(_060_),
    .B(_016_),
    .Y(_036_)
  );
  NAND _175_ (
    .A(reset),
    .B(_036_),
    .Y(_037_)
  );
  NOR _176_ (
    .A(_035_),
    .B(_037_),
    .Y(_003_[6])
  );
  NOR _177_ (
    .A(data_in[7]),
    .B(_016_),
    .Y(_038_)
  );
  NAND _178_ (
    .A(_061_),
    .B(_016_),
    .Y(_039_)
  );
  NAND _179_ (
    .A(reset),
    .B(_039_),
    .Y(_040_)
  );
  NOR _180_ (
    .A(_038_),
    .B(_040_),
    .Y(_003_[7])
  );
  NOR _181_ (
    .A(valid_in),
    .B(_063_),
    .Y(_041_)
  );
  NOR _182_ (
    .A(_062_),
    .B(_041_),
    .Y(_042_)
  );
  NAND _183_ (
    .A(_013_),
    .B(_042_),
    .Y(_001_)
  );
  NOR _184_ (
    .A(valid_in),
    .B(contador0),
    .Y(_043_)
  );
  NAND _185_ (
    .A(reset),
    .B(_014_),
    .Y(_044_)
  );
  NOR _186_ (
    .A(_043_),
    .B(_044_),
    .Y(_000_)
  );
  NOR _187_ (
    .A(_062_),
    .B(_013_),
    .Y(_005_)
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _188_ (
    .C(clk_2f),
    .D(_003_[0]),
    .Q(lane_1[0])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _189_ (
    .C(clk_2f),
    .D(_003_[1]),
    .Q(lane_1[1])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _190_ (
    .C(clk_2f),
    .D(_003_[2]),
    .Q(lane_1[2])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _191_ (
    .C(clk_2f),
    .D(_003_[3]),
    .Q(lane_1[3])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _192_ (
    .C(clk_2f),
    .D(_003_[4]),
    .Q(lane_1[4])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _193_ (
    .C(clk_2f),
    .D(_003_[5]),
    .Q(lane_1[5])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _194_ (
    .C(clk_2f),
    .D(_003_[6]),
    .Q(lane_1[6])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _195_ (
    .C(clk_2f),
    .D(_003_[7]),
    .Q(lane_1[7])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _196_ (
    .C(clk_2f),
    .D(_002_[0]),
    .Q(lane_0[0])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _197_ (
    .C(clk_2f),
    .D(_002_[1]),
    .Q(lane_0[1])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _198_ (
    .C(clk_2f),
    .D(_002_[2]),
    .Q(lane_0[2])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _199_ (
    .C(clk_2f),
    .D(_002_[3]),
    .Q(lane_0[3])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _200_ (
    .C(clk_2f),
    .D(_002_[4]),
    .Q(lane_0[4])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _201_ (
    .C(clk_2f),
    .D(_002_[5]),
    .Q(lane_0[5])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _202_ (
    .C(clk_2f),
    .D(_002_[6]),
    .Q(lane_0[6])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _203_ (
    .C(clk_2f),
    .D(_002_[7]),
    .Q(lane_0[7])
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _204_ (
    .C(clk_2f),
    .D(_001_),
    .Q(contador1)
  );
  (* src = "byte_striping_synth.v:51" *)
  DFF _205_ (
    .C(clk_2f),
    .D(_000_),
    .Q(contador0)
  );
  (* src = "byte_striping_synth.v:38" *)
  DFF _206_ (
    .C(clk_f),
    .D(_004_),
    .Q(valid_0)
  );
  (* src = "byte_striping_synth.v:23" *)
  DFF _207_ (
    .C(_006_),
    .D(_005_),
    .Q(valid_1)
  );
endmodule

(* src = "demux_synth_synth.v:1" *)
module demux_synth_synth(clk_2f, reset, data_out_0_synth, data_out_1_synth, data_in, valid_in, valid_out_0_synth, valid_out_1_synth);
  (* src = "demux_synth_synth.v:12" *)
  wire [7:0] _000_;
  (* src = "demux_synth_synth.v:12" *)
  wire [7:0] _001_;
  (* src = "demux_synth_synth.v:12" *)
  wire _002_;
  (* src = "demux_synth_synth.v:12" *)
  wire _003_;
  (* src = "demux_synth_synth.v:12" *)
  wire _004_;
  (* src = "demux_synth_synth.v:12" *)
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  (* src = "demux_synth_synth.v:2" *)
  input clk_2f;
  (* src = "demux_synth_synth.v:6" *)
  input [7:0] data_in;
  (* src = "demux_synth_synth.v:4" *)
  output [7:0] data_out_0_synth;
  (* src = "demux_synth_synth.v:5" *)
  output [7:0] data_out_1_synth;
  (* src = "demux_synth_synth.v:11" *)
  wire flag;
  (* src = "demux_synth_synth.v:3" *)
  input reset;
  (* src = "demux_synth_synth.v:11" *)
  wire selector;
  (* src = "demux_synth_synth.v:7" *)
  input valid_in;
  (* src = "demux_synth_synth.v:8" *)
  output valid_out_0_synth;
  (* src = "demux_synth_synth.v:9" *)
  output valid_out_1_synth;
  NOT _106_ (
    .A(valid_in),
    .Y(_061_)
  );
  NOT _107_ (
    .A(selector),
    .Y(_062_)
  );
  NOT _108_ (
    .A(flag),
    .Y(_063_)
  );
  NOT _109_ (
    .A(reset),
    .Y(_064_)
  );
  NOT _110_ (
    .A(valid_out_0_synth),
    .Y(_065_)
  );
  NOT _111_ (
    .A(data_in[0]),
    .Y(_066_)
  );
  NOT _112_ (
    .A(data_out_1_synth[0]),
    .Y(_067_)
  );
  NOT _113_ (
    .A(data_in[1]),
    .Y(_068_)
  );
  NOT _114_ (
    .A(data_out_1_synth[1]),
    .Y(_069_)
  );
  NOT _115_ (
    .A(data_in[2]),
    .Y(_070_)
  );
  NOT _116_ (
    .A(data_out_1_synth[2]),
    .Y(_071_)
  );
  NOT _117_ (
    .A(data_in[3]),
    .Y(_072_)
  );
  NOT _118_ (
    .A(data_out_1_synth[3]),
    .Y(_073_)
  );
  NOT _119_ (
    .A(data_in[4]),
    .Y(_074_)
  );
  NOT _120_ (
    .A(data_out_1_synth[4]),
    .Y(_075_)
  );
  NOT _121_ (
    .A(data_in[5]),
    .Y(_076_)
  );
  NOT _122_ (
    .A(data_out_1_synth[5]),
    .Y(_077_)
  );
  NOT _123_ (
    .A(data_in[6]),
    .Y(_078_)
  );
  NOT _124_ (
    .A(data_out_1_synth[6]),
    .Y(_079_)
  );
  NOT _125_ (
    .A(data_out_1_synth[7]),
    .Y(_080_)
  );
  NOR _126_ (
    .A(_061_),
    .B(selector),
    .Y(_081_)
  );
  NAND _127_ (
    .A(valid_in),
    .B(_062_),
    .Y(_082_)
  );
  NOR _128_ (
    .A(flag),
    .B(_082_),
    .Y(_083_)
  );
  NAND _129_ (
    .A(_063_),
    .B(_081_),
    .Y(_084_)
  );
  NOR _130_ (
    .A(_061_),
    .B(_062_),
    .Y(_085_)
  );
  NAND _131_ (
    .A(valid_in),
    .B(selector),
    .Y(_086_)
  );
  NOR _132_ (
    .A(selector),
    .B(_083_),
    .Y(_087_)
  );
  NOR _133_ (
    .A(flag),
    .B(_086_),
    .Y(_088_)
  );
  NAND _134_ (
    .A(_063_),
    .B(_085_),
    .Y(_089_)
  );
  NAND _135_ (
    .A(reset),
    .B(_089_),
    .Y(_090_)
  );
  NAND _136_ (
    .A(flag),
    .B(_085_),
    .Y(_091_)
  );
  NOR _137_ (
    .A(_087_),
    .B(_090_),
    .Y(_003_)
  );
  NAND _138_ (
    .A(_084_),
    .B(_091_),
    .Y(_092_)
  );
  NOR _139_ (
    .A(_065_),
    .B(_082_),
    .Y(_093_)
  );
  NOR _140_ (
    .A(_092_),
    .B(_093_),
    .Y(_094_)
  );
  NOR _141_ (
    .A(_064_),
    .B(_094_),
    .Y(_004_)
  );
  NOR _142_ (
    .A(_063_),
    .B(_082_),
    .Y(_095_)
  );
  NAND _143_ (
    .A(flag),
    .B(_081_),
    .Y(_096_)
  );
  NOR _144_ (
    .A(_088_),
    .B(_095_),
    .Y(_097_)
  );
  NOR _145_ (
    .A(data_in[0]),
    .B(_097_),
    .Y(_098_)
  );
  NAND _146_ (
    .A(_067_),
    .B(_097_),
    .Y(_099_)
  );
  NAND _147_ (
    .A(reset),
    .B(_099_),
    .Y(_100_)
  );
  NOR _148_ (
    .A(_098_),
    .B(_100_),
    .Y(_001_[0])
  );
  NOR _149_ (
    .A(data_in[1]),
    .B(_097_),
    .Y(_101_)
  );
  NAND _150_ (
    .A(_069_),
    .B(_097_),
    .Y(_102_)
  );
  NAND _151_ (
    .A(reset),
    .B(_102_),
    .Y(_103_)
  );
  NOR _152_ (
    .A(_101_),
    .B(_103_),
    .Y(_001_[1])
  );
  NOR _153_ (
    .A(data_in[2]),
    .B(_097_),
    .Y(_104_)
  );
  NAND _154_ (
    .A(_071_),
    .B(_097_),
    .Y(_105_)
  );
  NAND _155_ (
    .A(reset),
    .B(_105_),
    .Y(_006_)
  );
  NOR _156_ (
    .A(_104_),
    .B(_006_),
    .Y(_001_[2])
  );
  NOR _157_ (
    .A(data_in[3]),
    .B(_097_),
    .Y(_007_)
  );
  NAND _158_ (
    .A(_073_),
    .B(_097_),
    .Y(_008_)
  );
  NAND _159_ (
    .A(reset),
    .B(_008_),
    .Y(_009_)
  );
  NOR _160_ (
    .A(_007_),
    .B(_009_),
    .Y(_001_[3])
  );
  NOR _161_ (
    .A(data_in[4]),
    .B(_097_),
    .Y(_010_)
  );
  NAND _162_ (
    .A(_075_),
    .B(_097_),
    .Y(_011_)
  );
  NAND _163_ (
    .A(reset),
    .B(_011_),
    .Y(_012_)
  );
  NOR _164_ (
    .A(_010_),
    .B(_012_),
    .Y(_001_[4])
  );
  NOR _165_ (
    .A(data_in[5]),
    .B(_097_),
    .Y(_013_)
  );
  NAND _166_ (
    .A(_077_),
    .B(_097_),
    .Y(_014_)
  );
  NAND _167_ (
    .A(reset),
    .B(_014_),
    .Y(_015_)
  );
  NOR _168_ (
    .A(_013_),
    .B(_015_),
    .Y(_001_[5])
  );
  NOR _169_ (
    .A(data_in[6]),
    .B(_097_),
    .Y(_016_)
  );
  NAND _170_ (
    .A(_079_),
    .B(_097_),
    .Y(_017_)
  );
  NAND _171_ (
    .A(reset),
    .B(_017_),
    .Y(_018_)
  );
  NOR _172_ (
    .A(_016_),
    .B(_018_),
    .Y(_001_[6])
  );
  NOR _173_ (
    .A(data_out_1_synth[7]),
    .B(_095_),
    .Y(_019_)
  );
  NOR _174_ (
    .A(data_in[7]),
    .B(_096_),
    .Y(_020_)
  );
  NOR _175_ (
    .A(_019_),
    .B(_020_),
    .Y(_021_)
  );
  NOR _176_ (
    .A(_085_),
    .B(_021_),
    .Y(_022_)
  );
  NAND _177_ (
    .A(_063_),
    .B(data_in[7]),
    .Y(_023_)
  );
  NOR _178_ (
    .A(_063_),
    .B(_080_),
    .Y(_024_)
  );
  NOR _179_ (
    .A(_086_),
    .B(_024_),
    .Y(_025_)
  );
  NAND _180_ (
    .A(_023_),
    .B(_025_),
    .Y(_026_)
  );
  NAND _181_ (
    .A(reset),
    .B(_026_),
    .Y(_027_)
  );
  NOR _182_ (
    .A(_022_),
    .B(_027_),
    .Y(_001_[7])
  );
  NAND _183_ (
    .A(valid_in),
    .B(reset),
    .Y(_028_)
  );
  NOT _184_ (
    .A(_028_),
    .Y(_002_)
  );
  NAND _185_ (
    .A(valid_out_1_synth),
    .B(_085_),
    .Y(_029_)
  );
  NAND _186_ (
    .A(_097_),
    .B(_029_),
    .Y(_030_)
  );
  NAND _187_ (
    .A(reset),
    .B(_030_),
    .Y(_031_)
  );
  NOT _188_ (
    .A(_031_),
    .Y(_005_)
  );
  NOR _189_ (
    .A(data_out_0_synth[0]),
    .B(_092_),
    .Y(_032_)
  );
  NAND _190_ (
    .A(_066_),
    .B(_092_),
    .Y(_033_)
  );
  NAND _191_ (
    .A(reset),
    .B(_033_),
    .Y(_034_)
  );
  NOR _192_ (
    .A(_032_),
    .B(_034_),
    .Y(_000_[0])
  );
  NOR _193_ (
    .A(data_out_0_synth[1]),
    .B(_092_),
    .Y(_035_)
  );
  NAND _194_ (
    .A(_068_),
    .B(_092_),
    .Y(_036_)
  );
  NAND _195_ (
    .A(reset),
    .B(_036_),
    .Y(_037_)
  );
  NOR _196_ (
    .A(_035_),
    .B(_037_),
    .Y(_000_[1])
  );
  NOR _197_ (
    .A(data_out_0_synth[2]),
    .B(_092_),
    .Y(_038_)
  );
  NAND _198_ (
    .A(_070_),
    .B(_092_),
    .Y(_039_)
  );
  NAND _199_ (
    .A(reset),
    .B(_039_),
    .Y(_040_)
  );
  NOR _200_ (
    .A(_038_),
    .B(_040_),
    .Y(_000_[2])
  );
  NOR _201_ (
    .A(data_out_0_synth[3]),
    .B(_092_),
    .Y(_041_)
  );
  NAND _202_ (
    .A(_072_),
    .B(_092_),
    .Y(_042_)
  );
  NAND _203_ (
    .A(reset),
    .B(_042_),
    .Y(_043_)
  );
  NOR _204_ (
    .A(_041_),
    .B(_043_),
    .Y(_000_[3])
  );
  NOR _205_ (
    .A(data_out_0_synth[4]),
    .B(_092_),
    .Y(_044_)
  );
  NAND _206_ (
    .A(_074_),
    .B(_092_),
    .Y(_045_)
  );
  NAND _207_ (
    .A(reset),
    .B(_045_),
    .Y(_046_)
  );
  NOR _208_ (
    .A(_044_),
    .B(_046_),
    .Y(_000_[4])
  );
  NOR _209_ (
    .A(data_out_0_synth[5]),
    .B(_092_),
    .Y(_047_)
  );
  NAND _210_ (
    .A(_076_),
    .B(_092_),
    .Y(_048_)
  );
  NAND _211_ (
    .A(reset),
    .B(_048_),
    .Y(_049_)
  );
  NOR _212_ (
    .A(_047_),
    .B(_049_),
    .Y(_000_[5])
  );
  NOR _213_ (
    .A(data_out_0_synth[6]),
    .B(_092_),
    .Y(_050_)
  );
  NAND _214_ (
    .A(_078_),
    .B(_092_),
    .Y(_051_)
  );
  NAND _215_ (
    .A(reset),
    .B(_051_),
    .Y(_052_)
  );
  NOR _216_ (
    .A(_050_),
    .B(_052_),
    .Y(_000_[6])
  );
  NAND _217_ (
    .A(data_out_0_synth[7]),
    .B(_084_),
    .Y(_053_)
  );
  NAND _218_ (
    .A(_062_),
    .B(_023_),
    .Y(_054_)
  );
  NAND _219_ (
    .A(valid_in),
    .B(_054_),
    .Y(_055_)
  );
  NAND _220_ (
    .A(_053_),
    .B(_055_),
    .Y(_056_)
  );
  NOR _221_ (
    .A(data_in[7]),
    .B(_091_),
    .Y(_057_)
  );
  NOR _222_ (
    .A(data_out_0_synth[7]),
    .B(_089_),
    .Y(_058_)
  );
  NOR _223_ (
    .A(_064_),
    .B(_057_),
    .Y(_059_)
  );
  NAND _224_ (
    .A(_056_),
    .B(_059_),
    .Y(_060_)
  );
  NOR _225_ (
    .A(_058_),
    .B(_060_),
    .Y(_000_[7])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _226_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out_0_synth[0])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _227_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out_0_synth[1])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _228_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out_0_synth[2])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _229_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out_0_synth[3])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _230_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out_0_synth[4])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _231_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out_0_synth[5])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _232_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out_0_synth[6])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _233_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out_0_synth[7])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _234_ (
    .C(clk_2f),
    .D(_005_),
    .Q(valid_out_1_synth)
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _235_ (
    .C(clk_2f),
    .D(_002_),
    .Q(flag)
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _236_ (
    .C(clk_2f),
    .D(_001_[0]),
    .Q(data_out_1_synth[0])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _237_ (
    .C(clk_2f),
    .D(_001_[1]),
    .Q(data_out_1_synth[1])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _238_ (
    .C(clk_2f),
    .D(_001_[2]),
    .Q(data_out_1_synth[2])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _239_ (
    .C(clk_2f),
    .D(_001_[3]),
    .Q(data_out_1_synth[3])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _240_ (
    .C(clk_2f),
    .D(_001_[4]),
    .Q(data_out_1_synth[4])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _241_ (
    .C(clk_2f),
    .D(_001_[5]),
    .Q(data_out_1_synth[5])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _242_ (
    .C(clk_2f),
    .D(_001_[6]),
    .Q(data_out_1_synth[6])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _243_ (
    .C(clk_2f),
    .D(_001_[7]),
    .Q(data_out_1_synth[7])
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _244_ (
    .C(clk_2f),
    .D(_004_),
    .Q(valid_out_0_synth)
  );
  (* src = "demux_synth_synth.v:12" *)
  DFF _245_ (
    .C(clk_2f),
    .D(_003_),
    .Q(selector)
  );
endmodule

(* src = "etapa2_flops_synth.v:1" *)
module etapa2_flops_synth(data_in0, valid_in0, data_out0, valid_out0, clk_8f, reset);
  (* src = "etapa2_flops_synth.v:12" *)
  wire [7:0] _00_;
  (* src = "etapa2_flops_synth.v:12" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "etapa2_flops_synth.v:7" *)
  input clk_8f;
  (* src = "etapa2_flops_synth.v:2" *)
  input [7:0] data_in0;
  (* src = "etapa2_flops_synth.v:4" *)
  output [7:0] data_out0;
  (* src = "etapa2_flops_synth.v:8" *)
  input reset;
  (* src = "etapa2_flops_synth.v:3" *)
  input valid_in0;
  (* src = "etapa2_flops_synth.v:5" *)
  output valid_out0;
  NAND _11_ (
    .A(data_in0[0]),
    .B(reset),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_00_[0])
  );
  NAND _13_ (
    .A(reset),
    .B(data_in0[1]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_00_[1])
  );
  NAND _15_ (
    .A(reset),
    .B(data_in0[2]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_00_[2])
  );
  NAND _17_ (
    .A(reset),
    .B(data_in0[3]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_00_[3])
  );
  NAND _19_ (
    .A(reset),
    .B(data_in0[4]),
    .Y(_06_)
  );
  NOT _20_ (
    .A(_06_),
    .Y(_00_[4])
  );
  NAND _21_ (
    .A(reset),
    .B(data_in0[5]),
    .Y(_07_)
  );
  NOT _22_ (
    .A(_07_),
    .Y(_00_[5])
  );
  NAND _23_ (
    .A(reset),
    .B(data_in0[6]),
    .Y(_08_)
  );
  NOT _24_ (
    .A(_08_),
    .Y(_00_[6])
  );
  NAND _25_ (
    .A(reset),
    .B(data_in0[7]),
    .Y(_09_)
  );
  NOT _26_ (
    .A(_09_),
    .Y(_00_[7])
  );
  NAND _27_ (
    .A(reset),
    .B(valid_in0),
    .Y(_10_)
  );
  NOT _28_ (
    .A(_10_),
    .Y(_01_)
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _29_ (
    .C(clk_8f),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _30_ (
    .C(clk_8f),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _31_ (
    .C(clk_8f),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _32_ (
    .C(clk_8f),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _33_ (
    .C(clk_8f),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _34_ (
    .C(clk_8f),
    .D(_00_[5]),
    .Q(data_out0[5])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _35_ (
    .C(clk_8f),
    .D(_00_[6]),
    .Q(data_out0[6])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _36_ (
    .C(clk_8f),
    .D(_00_[7]),
    .Q(data_out0[7])
  );
  (* src = "etapa2_flops_synth.v:12" *)
  DFF _37_ (
    .C(clk_8f),
    .D(_01_),
    .Q(valid_out0)
  );
endmodule

(* src = "etapa_flops_synth.v:1" *)
module etapa_flops_synth(data_in0, data_in1, valid_in0, valid_in1, data_out0, data_out1, valid_out0, valid_out1, clk_2f, reset);
  (* src = "etapa_flops_synth.v:14" *)
  wire [7:0] _00_;
  (* src = "etapa_flops_synth.v:14" *)
  wire [7:0] _01_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _02_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  (* src = "etapa_flops_synth.v:10" *)
  input clk_2f;
  (* src = "etapa_flops_synth.v:2" *)
  input [7:0] data_in0;
  (* src = "etapa_flops_synth.v:3" *)
  input [7:0] data_in1;
  (* src = "etapa_flops_synth.v:6" *)
  output [7:0] data_out0;
  (* src = "etapa_flops_synth.v:7" *)
  output [7:0] data_out1;
  (* src = "etapa_flops_synth.v:11" *)
  input reset;
  (* src = "etapa_flops_synth.v:4" *)
  input valid_in0;
  (* src = "etapa_flops_synth.v:5" *)
  input valid_in1;
  (* src = "etapa_flops_synth.v:8" *)
  output valid_out0;
  (* src = "etapa_flops_synth.v:9" *)
  output valid_out1;
  NAND _22_ (
    .A(data_in1[1]),
    .B(reset),
    .Y(_04_)
  );
  NOT _23_ (
    .A(_04_),
    .Y(_01_[1])
  );
  NAND _24_ (
    .A(reset),
    .B(data_in1[2]),
    .Y(_05_)
  );
  NOT _25_ (
    .A(_05_),
    .Y(_01_[2])
  );
  NAND _26_ (
    .A(reset),
    .B(data_in1[3]),
    .Y(_06_)
  );
  NOT _27_ (
    .A(_06_),
    .Y(_01_[3])
  );
  NAND _28_ (
    .A(reset),
    .B(data_in1[4]),
    .Y(_07_)
  );
  NOT _29_ (
    .A(_07_),
    .Y(_01_[4])
  );
  NAND _30_ (
    .A(reset),
    .B(data_in1[5]),
    .Y(_08_)
  );
  NOT _31_ (
    .A(_08_),
    .Y(_01_[5])
  );
  NAND _32_ (
    .A(reset),
    .B(data_in1[6]),
    .Y(_09_)
  );
  NOT _33_ (
    .A(_09_),
    .Y(_01_[6])
  );
  NAND _34_ (
    .A(reset),
    .B(data_in1[7]),
    .Y(_10_)
  );
  NOT _35_ (
    .A(_10_),
    .Y(_01_[7])
  );
  NAND _36_ (
    .A(reset),
    .B(valid_in0),
    .Y(_11_)
  );
  NOT _37_ (
    .A(_11_),
    .Y(_02_)
  );
  NAND _38_ (
    .A(reset),
    .B(data_in0[0]),
    .Y(_12_)
  );
  NOT _39_ (
    .A(_12_),
    .Y(_00_[0])
  );
  NAND _40_ (
    .A(reset),
    .B(data_in0[1]),
    .Y(_13_)
  );
  NOT _41_ (
    .A(_13_),
    .Y(_00_[1])
  );
  NAND _42_ (
    .A(reset),
    .B(data_in0[2]),
    .Y(_14_)
  );
  NOT _43_ (
    .A(_14_),
    .Y(_00_[2])
  );
  NAND _44_ (
    .A(reset),
    .B(data_in0[3]),
    .Y(_15_)
  );
  NOT _45_ (
    .A(_15_),
    .Y(_00_[3])
  );
  NAND _46_ (
    .A(reset),
    .B(data_in0[4]),
    .Y(_16_)
  );
  NOT _47_ (
    .A(_16_),
    .Y(_00_[4])
  );
  NAND _48_ (
    .A(reset),
    .B(data_in0[5]),
    .Y(_17_)
  );
  NOT _49_ (
    .A(_17_),
    .Y(_00_[5])
  );
  NAND _50_ (
    .A(reset),
    .B(data_in0[6]),
    .Y(_18_)
  );
  NOT _51_ (
    .A(_18_),
    .Y(_00_[6])
  );
  NAND _52_ (
    .A(reset),
    .B(data_in0[7]),
    .Y(_19_)
  );
  NOT _53_ (
    .A(_19_),
    .Y(_00_[7])
  );
  NAND _54_ (
    .A(reset),
    .B(valid_in1),
    .Y(_20_)
  );
  NOT _55_ (
    .A(_20_),
    .Y(_03_)
  );
  NAND _56_ (
    .A(reset),
    .B(data_in1[0]),
    .Y(_21_)
  );
  NOT _57_ (
    .A(_21_),
    .Y(_01_[0])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _58_ (
    .C(clk_2f),
    .D(_03_),
    .Q(valid_out1)
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _59_ (
    .C(clk_2f),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _60_ (
    .C(clk_2f),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _61_ (
    .C(clk_2f),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _62_ (
    .C(clk_2f),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _63_ (
    .C(clk_2f),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _64_ (
    .C(clk_2f),
    .D(_00_[5]),
    .Q(data_out0[5])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _65_ (
    .C(clk_2f),
    .D(_00_[6]),
    .Q(data_out0[6])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _66_ (
    .C(clk_2f),
    .D(_00_[7]),
    .Q(data_out0[7])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _67_ (
    .C(clk_2f),
    .D(_01_[0]),
    .Q(data_out1[0])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _68_ (
    .C(clk_2f),
    .D(_01_[1]),
    .Q(data_out1[1])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _69_ (
    .C(clk_2f),
    .D(_01_[2]),
    .Q(data_out1[2])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _70_ (
    .C(clk_2f),
    .D(_01_[3]),
    .Q(data_out1[3])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _71_ (
    .C(clk_2f),
    .D(_01_[4]),
    .Q(data_out1[4])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _72_ (
    .C(clk_2f),
    .D(_01_[5]),
    .Q(data_out1[5])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _73_ (
    .C(clk_2f),
    .D(_01_[6]),
    .Q(data_out1[6])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _74_ (
    .C(clk_2f),
    .D(_01_[7]),
    .Q(data_out1[7])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _75_ (
    .C(clk_2f),
    .D(_02_),
    .Q(valid_out0)
  );
endmodule

(* src = "flopClock_synth.v:1" *)
module flopClock_synth(data_in, data_out, clk_2f, reset, resetNEG);
  (* src = "flopClock_synth.v:9" *)
  wire _0_;
  wire _1_;
  (* src = "flopClock_synth.v:4" *)
  input clk_2f;
  (* src = "flopClock_synth.v:2" *)
  input data_in;
  (* src = "flopClock_synth.v:3" *)
  output data_out;
  (* src = "flopClock_synth.v:5" *)
  input reset;
  (* src = "flopClock_synth.v:6" *)
  output resetNEG;
  NAND _2_ (
    .A(data_in),
    .B(reset),
    .Y(_1_)
  );
  NOT _3_ (
    .A(_1_),
    .Y(_0_)
  );
  (* src = "flopClock_synth.v:9" *)
  DFF _4_ (
    .C(clk_2f),
    .D(_0_),
    .Q(data_out)
  );
  (* src = "flopClock_synth.v:9" *)
  DFF _5_ (
    .C(clk_2f),
    .D(reset),
    .Q(resetNEG)
  );
endmodule

(* src = "flops_rx_synth1.v:1" *)
module flops_rx_synth1(data_in0, data_out0, clk_8f, reset);
  (* src = "flops_rx_synth1.v:8" *)
  wire _0_;
  wire _1_;
  (* src = "flops_rx_synth1.v:4" *)
  input clk_8f;
  (* src = "flops_rx_synth1.v:2" *)
  input data_in0;
  (* src = "flops_rx_synth1.v:3" *)
  output data_out0;
  (* src = "flops_rx_synth1.v:5" *)
  input reset;
  NAND _2_ (
    .A(data_in0),
    .B(reset),
    .Y(_1_)
  );
  NOT _3_ (
    .A(_1_),
    .Y(_0_)
  );
  (* src = "flops_rx_synth1.v:8" *)
  DFF _4_ (
    .C(clk_8f),
    .D(_0_),
    .Q(data_out0)
  );
endmodule

(* src = "mux_synth.v:1" *)
module mux_synth(clk_2f, reset, data_out, data_in0, data_in1, valid_in0, valid_in1, valid_out);
  (* src = "mux_synth.v:13" *)
  wire [7:0] _000_;
  (* src = "mux_synth.v:13" *)
  wire _001_;
  (* src = "mux_synth.v:13" *)
  wire _002_;
  (* src = "mux_synth.v:13" *)
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  (* src = "mux_synth.v:2" *)
  input clk_2f;
  (* src = "mux_synth.v:5" *)
  input [7:0] data_in0;
  (* src = "mux_synth.v:6" *)
  input [7:0] data_in1;
  (* src = "mux_synth.v:4" *)
  output [7:0] data_out;
  (* src = "mux_synth.v:3" *)
  input reset;
  (* src = "mux_synth.v:11" *)
  wire selector;
  (* src = "mux_synth.v:11" *)
  wire selector2;
  (* src = "mux_synth.v:7" *)
  input valid_in0;
  (* src = "mux_synth.v:8" *)
  input valid_in1;
  (* src = "mux_synth.v:9" *)
  output valid_out;
  NOT _143_ (
    .A(valid_in1),
    .Y(_087_)
  );
  NOT _144_ (
    .A(valid_in0),
    .Y(_088_)
  );
  NOT _145_ (
    .A(data_in0[0]),
    .Y(_089_)
  );
  NOT _146_ (
    .A(data_in1[0]),
    .Y(_090_)
  );
  NOT _147_ (
    .A(data_in0[1]),
    .Y(_091_)
  );
  NOT _148_ (
    .A(data_in1[1]),
    .Y(_092_)
  );
  NOT _149_ (
    .A(data_in0[2]),
    .Y(_093_)
  );
  NOT _150_ (
    .A(data_in1[2]),
    .Y(_094_)
  );
  NOT _151_ (
    .A(data_in0[3]),
    .Y(_095_)
  );
  NOT _152_ (
    .A(data_in1[3]),
    .Y(_096_)
  );
  NOT _153_ (
    .A(data_in0[4]),
    .Y(_097_)
  );
  NOT _154_ (
    .A(data_in1[4]),
    .Y(_098_)
  );
  NOT _155_ (
    .A(data_in0[5]),
    .Y(_099_)
  );
  NOT _156_ (
    .A(data_in1[5]),
    .Y(_100_)
  );
  NOT _157_ (
    .A(data_in0[6]),
    .Y(_101_)
  );
  NOT _158_ (
    .A(data_in1[6]),
    .Y(_102_)
  );
  NOT _159_ (
    .A(data_in0[7]),
    .Y(_103_)
  );
  NOT _160_ (
    .A(data_in1[7]),
    .Y(_104_)
  );
  NOT _161_ (
    .A(reset),
    .Y(_105_)
  );
  NOR _162_ (
    .A(valid_in1),
    .B(valid_in0),
    .Y(_106_)
  );
  NOR _163_ (
    .A(_105_),
    .B(_106_),
    .Y(_003_)
  );
  NOT _164_ (
    .A(_003_),
    .Y(_107_)
  );
  NOR _165_ (
    .A(_087_),
    .B(_088_),
    .Y(_108_)
  );
  NAND _166_ (
    .A(valid_in1),
    .B(valid_in0),
    .Y(_109_)
  );
  NAND _167_ (
    .A(valid_in0),
    .B(data_in0[0]),
    .Y(_110_)
  );
  NOR _168_ (
    .A(_087_),
    .B(valid_in0),
    .Y(_111_)
  );
  NOR _169_ (
    .A(data_out[0]),
    .B(_111_),
    .Y(_112_)
  );
  NAND _170_ (
    .A(_090_),
    .B(_111_),
    .Y(_113_)
  );
  NAND _171_ (
    .A(_087_),
    .B(valid_in0),
    .Y(_114_)
  );
  NAND _172_ (
    .A(reset),
    .B(_114_),
    .Y(_115_)
  );
  NAND _173_ (
    .A(_113_),
    .B(_114_),
    .Y(_116_)
  );
  NOR _174_ (
    .A(_112_),
    .B(_116_),
    .Y(_117_)
  );
  NOR _175_ (
    .A(_108_),
    .B(_117_),
    .Y(_118_)
  );
  NAND _176_ (
    .A(_110_),
    .B(_118_),
    .Y(_119_)
  );
  NAND _177_ (
    .A(reset),
    .B(_119_),
    .Y(_120_)
  );
  NOR _178_ (
    .A(valid_out),
    .B(_109_),
    .Y(_121_)
  );
  NOT _179_ (
    .A(_121_),
    .Y(_122_)
  );
  NOR _180_ (
    .A(_107_),
    .B(_121_),
    .Y(_123_)
  );
  NAND _181_ (
    .A(_003_),
    .B(_122_),
    .Y(_124_)
  );
  NOR _182_ (
    .A(selector),
    .B(_111_),
    .Y(_125_)
  );
  NOR _183_ (
    .A(_115_),
    .B(_125_),
    .Y(_126_)
  );
  NAND _184_ (
    .A(_123_),
    .B(_126_),
    .Y(_127_)
  );
  NAND _185_ (
    .A(selector2),
    .B(_124_),
    .Y(_128_)
  );
  NAND _186_ (
    .A(_127_),
    .B(_128_),
    .Y(_129_)
  );
  NOR _187_ (
    .A(_089_),
    .B(_129_),
    .Y(_130_)
  );
  NAND _188_ (
    .A(data_in1[0]),
    .B(_129_),
    .Y(_131_)
  );
  NAND _189_ (
    .A(_108_),
    .B(_131_),
    .Y(_132_)
  );
  NOR _190_ (
    .A(_130_),
    .B(_132_),
    .Y(_133_)
  );
  NOR _191_ (
    .A(_120_),
    .B(_133_),
    .Y(_000_[0])
  );
  NOR _192_ (
    .A(_091_),
    .B(_129_),
    .Y(_134_)
  );
  NAND _193_ (
    .A(data_in1[1]),
    .B(_129_),
    .Y(_135_)
  );
  NAND _194_ (
    .A(_108_),
    .B(_135_),
    .Y(_136_)
  );
  NOR _195_ (
    .A(_134_),
    .B(_136_),
    .Y(_137_)
  );
  NOR _196_ (
    .A(data_out[1]),
    .B(_111_),
    .Y(_138_)
  );
  NAND _197_ (
    .A(_092_),
    .B(_111_),
    .Y(_139_)
  );
  NAND _198_ (
    .A(_114_),
    .B(_139_),
    .Y(_140_)
  );
  NOR _199_ (
    .A(_138_),
    .B(_140_),
    .Y(_141_)
  );
  NAND _200_ (
    .A(valid_in0),
    .B(data_in0[1]),
    .Y(_142_)
  );
  NOR _201_ (
    .A(_108_),
    .B(_141_),
    .Y(_004_)
  );
  NAND _202_ (
    .A(_142_),
    .B(_004_),
    .Y(_005_)
  );
  NAND _203_ (
    .A(reset),
    .B(_005_),
    .Y(_006_)
  );
  NOR _204_ (
    .A(_137_),
    .B(_006_),
    .Y(_000_[1])
  );
  NOR _205_ (
    .A(_093_),
    .B(_129_),
    .Y(_007_)
  );
  NAND _206_ (
    .A(data_in1[2]),
    .B(_129_),
    .Y(_008_)
  );
  NAND _207_ (
    .A(_108_),
    .B(_008_),
    .Y(_009_)
  );
  NOR _208_ (
    .A(_007_),
    .B(_009_),
    .Y(_010_)
  );
  NOR _209_ (
    .A(data_out[2]),
    .B(_111_),
    .Y(_011_)
  );
  NAND _210_ (
    .A(_094_),
    .B(_111_),
    .Y(_012_)
  );
  NAND _211_ (
    .A(_114_),
    .B(_012_),
    .Y(_013_)
  );
  NOR _212_ (
    .A(_011_),
    .B(_013_),
    .Y(_014_)
  );
  NAND _213_ (
    .A(valid_in0),
    .B(data_in0[2]),
    .Y(_015_)
  );
  NOR _214_ (
    .A(_108_),
    .B(_014_),
    .Y(_016_)
  );
  NAND _215_ (
    .A(_015_),
    .B(_016_),
    .Y(_017_)
  );
  NAND _216_ (
    .A(reset),
    .B(_017_),
    .Y(_018_)
  );
  NOR _217_ (
    .A(_010_),
    .B(_018_),
    .Y(_000_[2])
  );
  NAND _218_ (
    .A(valid_in0),
    .B(data_in0[3]),
    .Y(_019_)
  );
  NOR _219_ (
    .A(data_out[3]),
    .B(_111_),
    .Y(_020_)
  );
  NAND _220_ (
    .A(_096_),
    .B(_111_),
    .Y(_021_)
  );
  NAND _221_ (
    .A(_114_),
    .B(_021_),
    .Y(_022_)
  );
  NOR _222_ (
    .A(_020_),
    .B(_022_),
    .Y(_023_)
  );
  NOR _223_ (
    .A(_108_),
    .B(_023_),
    .Y(_024_)
  );
  NAND _224_ (
    .A(_019_),
    .B(_024_),
    .Y(_025_)
  );
  NAND _225_ (
    .A(reset),
    .B(_025_),
    .Y(_026_)
  );
  NOR _226_ (
    .A(_095_),
    .B(_129_),
    .Y(_027_)
  );
  NAND _227_ (
    .A(data_in1[3]),
    .B(_129_),
    .Y(_028_)
  );
  NAND _228_ (
    .A(_108_),
    .B(_028_),
    .Y(_029_)
  );
  NOR _229_ (
    .A(_027_),
    .B(_029_),
    .Y(_030_)
  );
  NOR _230_ (
    .A(_026_),
    .B(_030_),
    .Y(_000_[3])
  );
  NOR _231_ (
    .A(_097_),
    .B(_129_),
    .Y(_031_)
  );
  NAND _232_ (
    .A(data_in1[4]),
    .B(_129_),
    .Y(_032_)
  );
  NAND _233_ (
    .A(_108_),
    .B(_032_),
    .Y(_033_)
  );
  NOR _234_ (
    .A(_031_),
    .B(_033_),
    .Y(_034_)
  );
  NOR _235_ (
    .A(data_out[4]),
    .B(_111_),
    .Y(_035_)
  );
  NAND _236_ (
    .A(_098_),
    .B(_111_),
    .Y(_036_)
  );
  NAND _237_ (
    .A(_114_),
    .B(_036_),
    .Y(_037_)
  );
  NOR _238_ (
    .A(_035_),
    .B(_037_),
    .Y(_038_)
  );
  NAND _239_ (
    .A(valid_in0),
    .B(data_in0[4]),
    .Y(_039_)
  );
  NOR _240_ (
    .A(_108_),
    .B(_038_),
    .Y(_040_)
  );
  NAND _241_ (
    .A(_039_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _242_ (
    .A(reset),
    .B(_041_),
    .Y(_042_)
  );
  NOR _243_ (
    .A(_034_),
    .B(_042_),
    .Y(_000_[4])
  );
  NAND _244_ (
    .A(valid_in0),
    .B(data_in0[5]),
    .Y(_043_)
  );
  NOR _245_ (
    .A(data_out[5]),
    .B(_111_),
    .Y(_044_)
  );
  NAND _246_ (
    .A(_100_),
    .B(_111_),
    .Y(_045_)
  );
  NAND _247_ (
    .A(_114_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _248_ (
    .A(_044_),
    .B(_046_),
    .Y(_047_)
  );
  NOR _249_ (
    .A(_108_),
    .B(_047_),
    .Y(_048_)
  );
  NAND _250_ (
    .A(_043_),
    .B(_048_),
    .Y(_049_)
  );
  NAND _251_ (
    .A(reset),
    .B(_049_),
    .Y(_050_)
  );
  NOR _252_ (
    .A(_099_),
    .B(_129_),
    .Y(_051_)
  );
  NAND _253_ (
    .A(data_in1[5]),
    .B(_129_),
    .Y(_052_)
  );
  NAND _254_ (
    .A(_108_),
    .B(_052_),
    .Y(_053_)
  );
  NOR _255_ (
    .A(_051_),
    .B(_053_),
    .Y(_054_)
  );
  NOR _256_ (
    .A(_050_),
    .B(_054_),
    .Y(_000_[5])
  );
  NOR _257_ (
    .A(_101_),
    .B(_129_),
    .Y(_055_)
  );
  NAND _258_ (
    .A(data_in1[6]),
    .B(_129_),
    .Y(_056_)
  );
  NAND _259_ (
    .A(_108_),
    .B(_056_),
    .Y(_057_)
  );
  NOR _260_ (
    .A(_055_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _261_ (
    .A(data_out[6]),
    .B(_111_),
    .Y(_059_)
  );
  NAND _262_ (
    .A(_102_),
    .B(_111_),
    .Y(_060_)
  );
  NAND _263_ (
    .A(_114_),
    .B(_060_),
    .Y(_061_)
  );
  NOR _264_ (
    .A(_059_),
    .B(_061_),
    .Y(_062_)
  );
  NAND _265_ (
    .A(valid_in0),
    .B(data_in0[6]),
    .Y(_063_)
  );
  NOR _266_ (
    .A(_108_),
    .B(_062_),
    .Y(_064_)
  );
  NAND _267_ (
    .A(_063_),
    .B(_064_),
    .Y(_065_)
  );
  NAND _268_ (
    .A(reset),
    .B(_065_),
    .Y(_066_)
  );
  NOR _269_ (
    .A(_058_),
    .B(_066_),
    .Y(_000_[6])
  );
  NOR _270_ (
    .A(_103_),
    .B(_129_),
    .Y(_067_)
  );
  NAND _271_ (
    .A(data_in1[7]),
    .B(_129_),
    .Y(_068_)
  );
  NAND _272_ (
    .A(_108_),
    .B(_068_),
    .Y(_069_)
  );
  NOR _273_ (
    .A(_067_),
    .B(_069_),
    .Y(_070_)
  );
  NOR _274_ (
    .A(data_out[7]),
    .B(_111_),
    .Y(_071_)
  );
  NAND _275_ (
    .A(_104_),
    .B(_111_),
    .Y(_072_)
  );
  NAND _276_ (
    .A(_114_),
    .B(_072_),
    .Y(_073_)
  );
  NOR _277_ (
    .A(_071_),
    .B(_073_),
    .Y(_074_)
  );
  NAND _278_ (
    .A(valid_in0),
    .B(data_in0[7]),
    .Y(_075_)
  );
  NOR _279_ (
    .A(_108_),
    .B(_074_),
    .Y(_076_)
  );
  NAND _280_ (
    .A(_075_),
    .B(_076_),
    .Y(_077_)
  );
  NAND _281_ (
    .A(reset),
    .B(_077_),
    .Y(_078_)
  );
  NOR _282_ (
    .A(_070_),
    .B(_078_),
    .Y(_000_[7])
  );
  NOR _283_ (
    .A(_109_),
    .B(_123_),
    .Y(_079_)
  );
  NOT _284_ (
    .A(_079_),
    .Y(_080_)
  );
  NAND _285_ (
    .A(selector2),
    .B(_079_),
    .Y(_081_)
  );
  NAND _286_ (
    .A(_126_),
    .B(_080_),
    .Y(_082_)
  );
  NAND _287_ (
    .A(_081_),
    .B(_082_),
    .Y(_083_)
  );
  NAND _288_ (
    .A(reset),
    .B(_083_),
    .Y(_084_)
  );
  NOT _289_ (
    .A(_084_),
    .Y(_002_)
  );
  NOR _290_ (
    .A(selector2),
    .B(_079_),
    .Y(_085_)
  );
  NAND _291_ (
    .A(reset),
    .B(_081_),
    .Y(_086_)
  );
  NOR _292_ (
    .A(_085_),
    .B(_086_),
    .Y(_001_)
  );
  (* src = "mux_synth.v:13" *)
  DFF _293_ (
    .C(clk_2f),
    .D(_002_),
    .Q(selector)
  );
  (* src = "mux_synth.v:13" *)
  DFF _294_ (
    .C(clk_2f),
    .D(_003_),
    .Q(valid_out)
  );
  (* src = "mux_synth.v:13" *)
  DFF _295_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out[0])
  );
  (* src = "mux_synth.v:13" *)
  DFF _296_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out[1])
  );
  (* src = "mux_synth.v:13" *)
  DFF _297_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out[2])
  );
  (* src = "mux_synth.v:13" *)
  DFF _298_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out[3])
  );
  (* src = "mux_synth.v:13" *)
  DFF _299_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out[4])
  );
  (* src = "mux_synth.v:13" *)
  DFF _300_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out[5])
  );
  (* src = "mux_synth.v:13" *)
  DFF _301_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out[6])
  );
  (* src = "mux_synth.v:13" *)
  DFF _302_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out[7])
  );
  (* src = "mux_synth.v:13" *)
  DFF _303_ (
    .C(clk_2f),
    .D(_001_),
    .Q(selector2)
  );
endmodule

(* top =  1  *)
(* src = "phy_synth.v:6" *)
module phy_synth(clk_8f, data_in0, data_in1, reset, resetCLK, valid_in0, valid_in1, data_out_0_synth, data_out_1_synth, valid_out_0_synth, valid_out_1_synth, clk_2f);
  (* src = "phy_synth.v:18" *)
  output clk_2f;
  (* src = "phy_synth.v:7" *)
  input clk_8f;
  (* src = "phy_synth.v:25" *)
  wire clk_f;
  (* src = "phy_synth.v:20" *)
  (* unused_bits = "0 1 2 3 4 5 6 7" *)
  wire [7:0] data2send0;
  (* src = "phy_synth.v:21" *)
  (* unused_bits = "0 1 2 3 4 5 6 7" *)
  wire [7:0] data2send1;
  (* src = "phy_synth.v:8" *)
  input [7:0] data_in0;
  (* src = "phy_synth.v:9" *)
  input [7:0] data_in1;
  (* src = "phy_synth.v:22" *)
  wire data_outS0;
  (* src = "phy_synth.v:22" *)
  wire data_outS1;
  (* src = "phy_synth.v:14" *)
  output [7:0] data_out_0_synth;
  (* src = "phy_synth.v:15" *)
  output [7:0] data_out_1_synth;
  (* src = "phy_synth.v:23" *)
  wire out0_flop1;
  (* src = "phy_synth.v:23" *)
  wire out0_flop2;
  (* src = "phy_synth.v:23" *)
  wire out0_flop3;
  (* src = "phy_synth.v:23" *)
  wire out0_flop4;
  (* src = "phy_synth.v:23" *)
  wire out0_flop5;
  (* src = "phy_synth.v:23" *)
  wire out0_flop6;
  (* src = "phy_synth.v:24" *)
  wire out1_flop1;
  (* src = "phy_synth.v:24" *)
  wire out1_flop2;
  (* src = "phy_synth.v:10" *)
  input reset;
  (* src = "phy_synth.v:11" *)
  input resetCLK;
  (* src = "phy_synth.v:12" *)
  input valid_in0;
  (* src = "phy_synth.v:13" *)
  input valid_in1;
  (* src = "phy_synth.v:16" *)
  output valid_out_0_synth;
  (* src = "phy_synth.v:17" *)
  output valid_out_1_synth;
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:51" *)
  flops_rx_synth1 Paso0_1 (
    .clk_8f(clk_8f),
    .data_in0(data_outS0),
    .data_out0(out0_flop1),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:57" *)
  flops_rx_synth1 Paso0_2 (
    .clk_8f(clk_8f),
    .data_in0(out0_flop1),
    .data_out0(out0_flop2),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:63" *)
  flops_rx_synth1 Paso0_3 (
    .clk_8f(clk_8f),
    .data_in0(out0_flop2),
    .data_out0(out0_flop3),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:69" *)
  flops_rx_synth1 Paso0_4 (
    .clk_8f(clk_8f),
    .data_in0(out0_flop3),
    .data_out0(out0_flop4),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:75" *)
  flops_rx_synth1 Paso0_5 (
    .clk_8f(clk_8f),
    .data_in0(out0_flop4),
    .data_out0(out0_flop5),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:81" *)
  flops_rx_synth1 Paso0_6 (
    .clk_8f(clk_8f),
    .data_in0(out0_flop5),
    .data_out0(out0_flop6),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:87" *)
  flops_rx_synth1 Paso1_1 (
    .clk_8f(clk_8f),
    .data_in0(data_outS1),
    .data_out0(out1_flop1),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:93" *)
  flops_rx_synth1 Paso1_2 (
    .clk_8f(clk_8f),
    .data_in0(out1_flop1),
    .data_out0(out1_flop2),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:28" *)
  generador_synth generador (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:100" *)
  synth_rx rx (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data_in0(out0_flop6),
    .data_in1(out1_flop2),
    .data_out_0_synth(data_out_0_synth),
    .data_out_1_synth(data_out_1_synth),
    .reset(reset),
    .resetCLK(resetCLK),
    .valid_out_0_synth(valid_out_0_synth),
    .valid_out_1_synth(valid_out_1_synth)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "phy_synth.v:35" *)
  synth_tx tx (
    .clk_2f(clk_2f),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send0(data2send0),
    .data2send1(data2send1),
    .data_in0(data_in0),
    .data_in1(data_in1),
    .data_outS0(data_outS0),
    .data_outS1(data_outS1),
    .reset(reset),
    .resetCLK(resetCLK),
    .valid_in0(valid_in0),
    .valid_in1(valid_in1)
  );
endmodule

(* src = "synth_rx.v:7" *)
module synth_rx(clk_f, clk_2f, clk_8f, data_in0, data_in1, reset, resetCLK, data_out_0_synth, data_out_1_synth, valid_out_0_synth, valid_out_1_synth);
  (* src = "synth_rx.v:22" *)
  (* unused_bits = "0 1 2 3" *)
  wire [3:0] BC_counter0;
  (* src = "synth_rx.v:22" *)
  (* unused_bits = "0 1 2 3" *)
  wire [3:0] BC_counter1;
  (* src = "synth_rx.v:23" *)
  (* unused_bits = "0" *)
  wire active0;
  (* src = "synth_rx.v:23" *)
  (* unused_bits = "0" *)
  wire active1;
  (* src = "synth_rx.v:9" *)
  input clk_2f;
  (* src = "synth_rx.v:10" *)
  input clk_8f;
  (* src = "synth_rx.v:8" *)
  input clk_f;
  (* src = "synth_rx.v:21" *)
  wire [7:0] d_out_F;
  (* src = "synth_rx.v:21" *)
  wire [7:0] d_out_us;
  (* src = "synth_rx.v:21" *)
  wire [7:0] data2send0;
  (* src = "synth_rx.v:21" *)
  wire [7:0] data2send1;
  (* src = "synth_rx.v:11" *)
  input data_in0;
  (* src = "synth_rx.v:12" *)
  input data_in1;
  (* src = "synth_rx.v:15" *)
  output [7:0] data_out_0_synth;
  (* src = "synth_rx.v:16" *)
  output [7:0] data_out_1_synth;
  (* src = "synth_rx.v:21" *)
  wire [7:0] out_0F;
  (* src = "synth_rx.v:21" *)
  wire [7:0] out_1F;
  (* src = "synth_rx.v:13" *)
  input reset;
  (* src = "synth_rx.v:14" *)
  input resetCLK;
  (* src = "synth_rx.v:23" *)
  wire resetSP;
  (* src = "synth_rx.v:23" *)
  wire v_out_us;
  (* src = "synth_rx.v:17" *)
  output valid_out_0_synth;
  (* src = "synth_rx.v:18" *)
  output valid_out_1_synth;
  (* src = "synth_rx.v:23" *)
  wire valid_out_sp0;
  (* src = "synth_rx.v:23" *)
  wire valid_out_sp1;
  (* src = "synth_rx.v:23" *)
  wire vout_0F;
  (* src = "synth_rx.v:23" *)
  wire vout_1F;
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:68" *)
  demux_synth_synth demux_synth_synth (
    .clk_2f(clk_2f),
    .data_in(d_out_F),
    .data_out_0_synth(out_0F),
    .data_out_1_synth(out_1F),
    .reset(reset),
    .valid_in(v_out_us),
    .valid_out_0_synth(vout_0F),
    .valid_out_1_synth(vout_1F)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:26" *)
  flops_rx_synth1 flopRESETSP0 (
    .clk_8f(clk_f),
    .data_in0(reset),
    .data_out0(resetSP),
    .reset(resetCLK)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:61" *)
  etapa2_flops_synth flops (
    .clk_8f(clk_8f),
    .data_in0(d_out_us),
    .data_out0(d_out_F),
    .reset(reset),
    .valid_in0(v_out_us)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:77" *)
  etapa_flops_synth flops2 (
    .clk_2f(clk_2f),
    .data_in0(out_0F),
    .data_in1(out_1F),
    .data_out0(data_out_0_synth),
    .data_out1(data_out_1_synth),
    .reset(reset),
    .valid_in0(vout_0F),
    .valid_in1(vout_1F),
    .valid_out0(valid_out_0_synth),
    .valid_out1(valid_out_1_synth)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:32" *)
  s2p_synth serieParalelo0 (
    .BC_counter(BC_counter0),
    .active(active0),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send(data2send0),
    .data_in(data_in0),
    .reset(resetSP),
    .valid_out(valid_out_sp0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:41" *)
  s2p_synth serieParalelo1 (
    .BC_counter(BC_counter1),
    .active(active1),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send(data2send1),
    .data_in(data_in1),
    .reset(resetSP),
    .valid_out(valid_out_sp1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_rx.v:51" *)
  unstriping_synth unstriping_synth (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_out(d_out_us),
    .lane_0(data2send0),
    .lane_1(data2send1),
    .reset(reset),
    .valid_0(valid_out_sp0),
    .valid_1(valid_out_sp1),
    .valid_out(v_out_us)
  );
endmodule

(* src = "synth_tx.v:9" *)
module synth_tx(clk_2f, clk_8f, clk_f, reset, resetCLK, data_in0, data_in1, valid_in0, valid_in1, data2send0, data2send1, data_outS0, data_outS1);
  (* src = "synth_tx.v:10" *)
  input clk_2f;
  (* src = "synth_tx.v:11" *)
  input clk_8f;
  (* src = "synth_tx.v:12" *)
  input clk_f;
  (* src = "synth_tx.v:30" *)
  wire [7:0] d_out;
  (* src = "synth_tx.v:36" *)
  wire [7:0] d_out2;
  (* src = "synth_tx.v:19" *)
  output [7:0] data2send0;
  (* src = "synth_tx.v:20" *)
  output [7:0] data2send1;
  (* src = "synth_tx.v:15" *)
  input [7:0] data_in0;
  (* src = "synth_tx.v:16" *)
  input [7:0] data_in1;
  (* src = "synth_tx.v:21" *)
  output data_outS0;
  (* src = "synth_tx.v:22" *)
  output data_outS1;
  (* src = "synth_tx.v:32" *)
  wire [7:0] in0;
  (* src = "synth_tx.v:33" *)
  wire [7:0] in1;
  (* src = "synth_tx.v:34" *)
  wire [7:0] lane0;
  (* src = "synth_tx.v:35" *)
  wire [7:0] lane1;
  (* src = "synth_tx.v:13" *)
  input reset;
  (* src = "synth_tx.v:95" *)
  wire resetByte0;
  (* src = "synth_tx.v:100" *)
  wire resetByte1;
  (* src = "synth_tx.v:105" *)
  wire resetByte2;
  (* src = "synth_tx.v:110" *)
  wire resetByte3;
  (* src = "synth_tx.v:14" *)
  input resetCLK;
  (* src = "synth_tx.v:47" *)
  wire superClock1;
  (* src = "synth_tx.v:47" *)
  wire superClock2;
  (* src = "synth_tx.v:47" *)
  wire superReset1;
  (* src = "synth_tx.v:47" *)
  wire superReset2;
  (* src = "synth_tx.v:47" *)
  wire v_out;
  (* src = "synth_tx.v:47" *)
  wire v_out2;
  (* src = "synth_tx.v:47" *)
  wire valid0;
  (* src = "synth_tx.v:47" *)
  wire valid0bs;
  (* src = "synth_tx.v:47" *)
  wire valid1;
  (* src = "synth_tx.v:47" *)
  wire valid1bs;
  (* src = "synth_tx.v:17" *)
  input valid_in0;
  (* src = "synth_tx.v:18" *)
  input valid_in1;
  (* src = "synth_tx.v:111" *)
  DFF _0_ (
    .C(clk_8f),
    .D(resetByte2),
    .Q(resetByte3)
  );
  (* src = "synth_tx.v:106" *)
  DFF _1_ (
    .C(clk_8f),
    .D(resetByte1),
    .Q(resetByte2)
  );
  (* src = "synth_tx.v:101" *)
  DFF _2_ (
    .C(clk_8f),
    .D(resetByte0),
    .Q(resetByte1)
  );
  (* src = "synth_tx.v:96" *)
  DFF _3_ (
    .C(clk_8f),
    .D(reset),
    .Q(resetByte0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:115" *)
  byte_striping_synth byte_striping_synth1 (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_in(d_out2),
    .lane_0(lane0),
    .lane_1(lane1),
    .reset(reset),
    .valid_0(valid0bs),
    .valid_1(valid1bs),
    .valid_in(v_out2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:128" *)
  flopClock_synth flopClock_synth_1 (
    .clk_2f(clk_2f),
    .data_in(clk_f),
    .data_out(superClock1),
    .reset(reset),
    .resetNEG(superReset1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:134" *)
  flopClock_synth flopClock_synth_2 (
    .clk_2f(clk_2f),
    .data_in(superClock1),
    .data_out(superClock2),
    .reset(superReset1),
    .resetNEG(superReset2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:51" *)
  etapa_flops_synth flops (
    .clk_2f(clk_2f),
    .data_in0(data_in0),
    .data_in1(data_in1),
    .data_out0(in0),
    .data_out1(in1),
    .reset(reset),
    .valid_in0(valid_in0),
    .valid_in1(valid_in1),
    .valid_out0(valid0),
    .valid_out1(valid1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:77" *)
  etapa2_flops_synth flops2 (
    .clk_8f(clk_8f),
    .data_in0(d_out),
    .data_out0(d_out2),
    .reset(reset),
    .valid_in0(v_out),
    .valid_out0(v_out2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:62" *)
  mux_synth mux_synth1 (
    .clk_2f(clk_2f),
    .data_in0(in0),
    .data_in1(in1),
    .data_out(d_out),
    .reset(reset),
    .valid_in0(valid0),
    .valid_in1(valid1),
    .valid_out(v_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:162" *)
  p2s_synth p2s0 (
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send(data2send0),
    .data_inP(lane0),
    .data_outS(data_outS0),
    .reset(resetByte3),
    .valid_in(valid0bs)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_tx.v:181" *)
  p2s_synth p2s1 (
    .clk_8f(clk_8f),
    .clk_f(superClock2),
    .data2send(data2send1),
    .data_inP(lane1),
    .data_outS(data_outS1),
    .reset(superReset2),
    .valid_in(valid1bs)
  );
endmodule

(* src = "unstriping_synth.v:1" *)
module unstriping_synth(clk_f, clk_2f, reset, lane_0, valid_0, lane_1, valid_1, data_out, valid_out);
  (* src = "unstriping_synth.v:13" *)
  wire [7:0] _000_;
  (* src = "unstriping_synth.v:13" *)
  wire _001_;
  (* src = "unstriping_synth.v:13" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  (* src = "unstriping_synth.v:3" *)
  input clk_2f;
  (* src = "unstriping_synth.v:2" *)
  input clk_f;
  (* src = "unstriping_synth.v:9" *)
  output [7:0] data_out;
  (* src = "unstriping_synth.v:5" *)
  input [7:0] lane_0;
  (* src = "unstriping_synth.v:7" *)
  input [7:0] lane_1;
  (* src = "unstriping_synth.v:4" *)
  input reset;
  (* src = "unstriping_synth.v:12" *)
  wire selector;
  (* src = "unstriping_synth.v:6" *)
  input valid_0;
  (* src = "unstriping_synth.v:8" *)
  input valid_1;
  (* src = "unstriping_synth.v:10" *)
  output valid_out;
  NOT _063_ (
    .A(data_out[1]),
    .Y(_009_)
  );
  NOT _064_ (
    .A(valid_1),
    .Y(_010_)
  );
  NOT _065_ (
    .A(data_out[2]),
    .Y(_011_)
  );
  NOT _066_ (
    .A(data_out[3]),
    .Y(_012_)
  );
  NOT _067_ (
    .A(data_out[4]),
    .Y(_013_)
  );
  NOT _068_ (
    .A(data_out[5]),
    .Y(_014_)
  );
  NOT _069_ (
    .A(data_out[6]),
    .Y(_015_)
  );
  NOT _070_ (
    .A(data_out[7]),
    .Y(_016_)
  );
  NOT _071_ (
    .A(reset),
    .Y(_017_)
  );
  NOT _072_ (
    .A(data_out[0]),
    .Y(_018_)
  );
  NOT _073_ (
    .A(valid_0),
    .Y(_019_)
  );
  NOT _074_ (
    .A(selector),
    .Y(_020_)
  );
  NOR _075_ (
    .A(valid_0),
    .B(selector),
    .Y(_021_)
  );
  NOT _076_ (
    .A(_021_),
    .Y(_022_)
  );
  NOR _077_ (
    .A(valid_1),
    .B(_020_),
    .Y(_023_)
  );
  NOR _078_ (
    .A(_019_),
    .B(selector),
    .Y(_024_)
  );
  NOR _079_ (
    .A(_010_),
    .B(_020_),
    .Y(_025_)
  );
  NOR _080_ (
    .A(_021_),
    .B(_023_),
    .Y(_026_)
  );
  NOR _081_ (
    .A(_018_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _082_ (
    .A(lane_0[0]),
    .B(_024_),
    .Y(_028_)
  );
  NAND _083_ (
    .A(lane_1[0]),
    .B(_025_),
    .Y(_029_)
  );
  NAND _084_ (
    .A(_028_),
    .B(_029_),
    .Y(_030_)
  );
  NOR _085_ (
    .A(_027_),
    .B(_030_),
    .Y(_031_)
  );
  NOR _086_ (
    .A(_017_),
    .B(_031_),
    .Y(_000_[0])
  );
  NOR _087_ (
    .A(_009_),
    .B(_026_),
    .Y(_032_)
  );
  NAND _088_ (
    .A(lane_0[1]),
    .B(_024_),
    .Y(_033_)
  );
  NAND _089_ (
    .A(lane_1[1]),
    .B(_025_),
    .Y(_034_)
  );
  NAND _090_ (
    .A(_033_),
    .B(_034_),
    .Y(_035_)
  );
  NOR _091_ (
    .A(_032_),
    .B(_035_),
    .Y(_036_)
  );
  NOR _092_ (
    .A(_017_),
    .B(_036_),
    .Y(_000_[1])
  );
  NOR _093_ (
    .A(_011_),
    .B(_026_),
    .Y(_037_)
  );
  NAND _094_ (
    .A(lane_0[2]),
    .B(_024_),
    .Y(_038_)
  );
  NAND _095_ (
    .A(lane_1[2]),
    .B(_025_),
    .Y(_039_)
  );
  NAND _096_ (
    .A(_038_),
    .B(_039_),
    .Y(_040_)
  );
  NOR _097_ (
    .A(_037_),
    .B(_040_),
    .Y(_041_)
  );
  NOR _098_ (
    .A(_017_),
    .B(_041_),
    .Y(_000_[2])
  );
  NOR _099_ (
    .A(_012_),
    .B(_026_),
    .Y(_042_)
  );
  NAND _100_ (
    .A(lane_0[3]),
    .B(_024_),
    .Y(_043_)
  );
  NAND _101_ (
    .A(lane_1[3]),
    .B(_025_),
    .Y(_044_)
  );
  NAND _102_ (
    .A(_043_),
    .B(_044_),
    .Y(_045_)
  );
  NOR _103_ (
    .A(_042_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _104_ (
    .A(_017_),
    .B(_046_),
    .Y(_000_[3])
  );
  NOR _105_ (
    .A(_013_),
    .B(_026_),
    .Y(_047_)
  );
  NAND _106_ (
    .A(lane_0[4]),
    .B(_024_),
    .Y(_048_)
  );
  NAND _107_ (
    .A(lane_1[4]),
    .B(_025_),
    .Y(_049_)
  );
  NAND _108_ (
    .A(_048_),
    .B(_049_),
    .Y(_050_)
  );
  NOR _109_ (
    .A(_047_),
    .B(_050_),
    .Y(_051_)
  );
  NOR _110_ (
    .A(_017_),
    .B(_051_),
    .Y(_000_[4])
  );
  NOR _111_ (
    .A(_014_),
    .B(_026_),
    .Y(_052_)
  );
  NAND _112_ (
    .A(lane_0[5]),
    .B(_024_),
    .Y(_053_)
  );
  NAND _113_ (
    .A(lane_1[5]),
    .B(_025_),
    .Y(_054_)
  );
  NAND _114_ (
    .A(_053_),
    .B(_054_),
    .Y(_055_)
  );
  NOR _115_ (
    .A(_052_),
    .B(_055_),
    .Y(_056_)
  );
  NOR _116_ (
    .A(_017_),
    .B(_056_),
    .Y(_000_[5])
  );
  NOR _117_ (
    .A(_015_),
    .B(_026_),
    .Y(_057_)
  );
  NAND _118_ (
    .A(lane_0[6]),
    .B(_024_),
    .Y(_058_)
  );
  NAND _119_ (
    .A(lane_1[6]),
    .B(_025_),
    .Y(_059_)
  );
  NAND _120_ (
    .A(_058_),
    .B(_059_),
    .Y(_060_)
  );
  NOR _121_ (
    .A(_057_),
    .B(_060_),
    .Y(_061_)
  );
  NOR _122_ (
    .A(_017_),
    .B(_061_),
    .Y(_000_[6])
  );
  NOR _123_ (
    .A(_016_),
    .B(_026_),
    .Y(_062_)
  );
  NAND _124_ (
    .A(lane_0[7]),
    .B(_024_),
    .Y(_003_)
  );
  NAND _125_ (
    .A(lane_1[7]),
    .B(_025_),
    .Y(_004_)
  );
  NAND _126_ (
    .A(_003_),
    .B(_004_),
    .Y(_005_)
  );
  NOR _127_ (
    .A(_062_),
    .B(_005_),
    .Y(_006_)
  );
  NOR _128_ (
    .A(_017_),
    .B(_006_),
    .Y(_000_[7])
  );
  NAND _129_ (
    .A(reset),
    .B(_022_),
    .Y(_007_)
  );
  NAND _130_ (
    .A(reset),
    .B(_026_),
    .Y(_008_)
  );
  NOT _131_ (
    .A(_008_),
    .Y(_002_)
  );
  NOR _132_ (
    .A(_025_),
    .B(_007_),
    .Y(_001_)
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _133_ (
    .C(clk_2f),
    .D(_001_),
    .Q(selector)
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _134_ (
    .C(clk_2f),
    .D(_002_),
    .Q(valid_out)
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _135_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out[0])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _136_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out[1])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _137_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out[2])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _138_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out[3])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _139_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out[4])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _140_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out[5])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _141_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out[6])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _142_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out[7])
  );
endmodule
