/* Generated by Yosys 0.8+463 (git sha1 5772732a, clang 6.0.0-1ubuntu2 -fPIC -Os) */

(* src = "SerieParalelo_synth.v:2" *)
module SerieParalelo_synth(clk_f, clk_8f, data_in, reset, data2send, BC_counter, valid_out, active);
  (* src = "SerieParalelo_synth.v:25" *)
  wire [3:0] _000_;
  (* src = "SerieParalelo_synth.v:17" *)
  wire [2:0] _001_;
  (* src = "SerieParalelo_synth.v:25" *)
  wire _002_;
  (* src = "SerieParalelo_synth.v:25" *)
  wire _003_;
  (* src = "SerieParalelo_synth.v:25" *)
  wire _004_;
  (* src = "SerieParalelo_synth.v:25" *)
  wire _005_;
  (* src = "SerieParalelo_synth.v:17" *)
  wire _006_;
  (* src = "SerieParalelo_synth.v:17" *)
  wire _007_;
  (* src = "SerieParalelo_synth.v:17" *)
  wire _008_;
  (* src = "SerieParalelo_synth.v:10" *)
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _113_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _114_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _115_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _116_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _117_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _118_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _119_;
  (* src = "SerieParalelo_synth.v:13" *)
  wire _120_;
  (* src = "SerieParalelo_synth.v:9" *)
  wire _121_;
  (* src = "SerieParalelo_synth.v:8" *)
  output [3:0] BC_counter;
  (* src = "SerieParalelo_synth.v:14" *)
  (* unused_bits = "0 1 2 3" *)
  wire [3:0] BC_counterF;
  (* src = "SerieParalelo_synth.v:10" *)
  output active;
  (* src = "SerieParalelo_synth.v:15" *)
  (* unused_bits = "0" *)
  wire active2;
  (* src = "SerieParalelo_synth.v:15" *)
  (* unused_bits = "0" *)
  wire active2F;
  (* src = "SerieParalelo_synth.v:15" *)
  wire activeF;
  (* src = "SerieParalelo_synth.v:4" *)
  input clk_8f;
  (* src = "SerieParalelo_synth.v:3" *)
  input clk_f;
  (* src = "SerieParalelo_synth.v:12" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] contador;
  (* src = "SerieParalelo_synth.v:12" *)
  wire [2:0] contadorF;
  (* src = "SerieParalelo_synth.v:7" *)
  output [7:0] data2send;
  (* src = "SerieParalelo_synth.v:5" *)
  input data_in;
  (* src = "SerieParalelo_synth.v:13" *)
  wire [7:0] pasoInSend;
  (* src = "SerieParalelo_synth.v:13" *)
  wire [7:0] pasoInSendF;
  (* src = "SerieParalelo_synth.v:6" *)
  input reset;
  (* src = "SerieParalelo_synth.v:9" *)
  output valid_out;
  (* src = "SerieParalelo_synth.v:15" *)
  (* unused_bits = "0" *)
  wire valid_outF;
  NOT _122_ (
    .A(BC_counter[0]),
    .Y(_063_)
  );
  NOT _123_ (
    .A(BC_counter[1]),
    .Y(_064_)
  );
  NOT _124_ (
    .A(BC_counter[3]),
    .Y(_065_)
  );
  NOT _125_ (
    .A(data2send[0]),
    .Y(_066_)
  );
  NOT _126_ (
    .A(contadorF[2]),
    .Y(_067_)
  );
  NOT _127_ (
    .A(contadorF[0]),
    .Y(_068_)
  );
  NOT _128_ (
    .A(reset),
    .Y(_069_)
  );
  NOT _129_ (
    .A(BC_counter[2]),
    .Y(_070_)
  );
  NOT _130_ (
    .A(data_in),
    .Y(_071_)
  );
  NOT _131_ (
    .A(pasoInSendF[4]),
    .Y(_072_)
  );
  NOT _132_ (
    .A(pasoInSendF[5]),
    .Y(_073_)
  );
  NOT _133_ (
    .A(pasoInSendF[1]),
    .Y(_074_)
  );
  NOT _134_ (
    .A(pasoInSendF[7]),
    .Y(_075_)
  );
  NOR _135_ (
    .A(contadorF[0]),
    .B(contadorF[1]),
    .Y(_076_)
  );
  NOT _136_ (
    .A(_076_),
    .Y(_077_)
  );
  NOR _137_ (
    .A(contadorF[2]),
    .B(_077_),
    .Y(_078_)
  );
  NOR _138_ (
    .A(pasoInSendF[0]),
    .B(_078_),
    .Y(_079_)
  );
  NAND _139_ (
    .A(_071_),
    .B(_078_),
    .Y(_080_)
  );
  NAND _140_ (
    .A(reset),
    .B(_080_),
    .Y(_081_)
  );
  NOR _141_ (
    .A(_079_),
    .B(_081_),
    .Y(pasoInSend[0])
  );
  NOR _142_ (
    .A(_068_),
    .B(contadorF[1]),
    .Y(_082_)
  );
  NAND _143_ (
    .A(_067_),
    .B(_082_),
    .Y(_083_)
  );
  NAND _144_ (
    .A(_074_),
    .B(_083_),
    .Y(_084_)
  );
  NOR _145_ (
    .A(data_in),
    .B(_083_),
    .Y(_085_)
  );
  NAND _146_ (
    .A(reset),
    .B(_084_),
    .Y(_086_)
  );
  NOR _147_ (
    .A(_085_),
    .B(_086_),
    .Y(pasoInSend[1])
  );
  NAND _148_ (
    .A(_068_),
    .B(contadorF[1]),
    .Y(_087_)
  );
  NOR _149_ (
    .A(_067_),
    .B(_087_),
    .Y(_088_)
  );
  NOR _150_ (
    .A(pasoInSendF[6]),
    .B(_088_),
    .Y(_089_)
  );
  NAND _151_ (
    .A(_071_),
    .B(_088_),
    .Y(_090_)
  );
  NAND _152_ (
    .A(reset),
    .B(_090_),
    .Y(_091_)
  );
  NOR _153_ (
    .A(_089_),
    .B(_091_),
    .Y(pasoInSend[6])
  );
  NOT _154_ (
    .A(pasoInSend[6]),
    .Y(_092_)
  );
  NOR _155_ (
    .A(BC_counter[0]),
    .B(BC_counter[1]),
    .Y(_093_)
  );
  NOR _156_ (
    .A(BC_counter[3]),
    .B(_070_),
    .Y(_094_)
  );
  NAND _157_ (
    .A(_093_),
    .B(_094_),
    .Y(_095_)
  );
  NOT _158_ (
    .A(_095_),
    .Y(_096_)
  );
  NAND _159_ (
    .A(data2send[3]),
    .B(data2send[7]),
    .Y(_097_)
  );
  NOR _160_ (
    .A(data2send[1]),
    .B(data2send[6]),
    .Y(_098_)
  );
  NOT _161_ (
    .A(_098_),
    .Y(_099_)
  );
  NOR _162_ (
    .A(_097_),
    .B(_099_),
    .Y(_100_)
  );
  NAND _163_ (
    .A(data2send[4]),
    .B(data2send[5]),
    .Y(_101_)
  );
  NAND _164_ (
    .A(_066_),
    .B(data2send[2]),
    .Y(_102_)
  );
  NOR _165_ (
    .A(_101_),
    .B(_102_),
    .Y(_103_)
  );
  NAND _166_ (
    .A(_100_),
    .B(_103_),
    .Y(_104_)
  );
  NAND _167_ (
    .A(reset),
    .B(_104_),
    .Y(_105_)
  );
  NOR _168_ (
    .A(_095_),
    .B(_105_),
    .Y(valid_out)
  );
  NOR _169_ (
    .A(activeF),
    .B(_096_),
    .Y(_106_)
  );
  NOR _170_ (
    .A(_069_),
    .B(_106_),
    .Y(active)
  );
  NOR _171_ (
    .A(contadorF[2]),
    .B(_087_),
    .Y(_107_)
  );
  NOR _172_ (
    .A(pasoInSendF[2]),
    .B(_107_),
    .Y(_108_)
  );
  NAND _173_ (
    .A(_071_),
    .B(_107_),
    .Y(_109_)
  );
  NOR _174_ (
    .A(_069_),
    .B(_108_),
    .Y(_110_)
  );
  NAND _175_ (
    .A(_109_),
    .B(_110_),
    .Y(_111_)
  );
  NOT _176_ (
    .A(_111_),
    .Y(pasoInSend[2])
  );
  NAND _177_ (
    .A(contadorF[0]),
    .B(contadorF[1]),
    .Y(_112_)
  );
  NOT _178_ (
    .A(_112_),
    .Y(_010_)
  );
  NOR _179_ (
    .A(contadorF[2]),
    .B(_112_),
    .Y(_011_)
  );
  NOR _180_ (
    .A(pasoInSendF[3]),
    .B(_011_),
    .Y(_012_)
  );
  NAND _181_ (
    .A(_071_),
    .B(_011_),
    .Y(_013_)
  );
  NAND _182_ (
    .A(reset),
    .B(_013_),
    .Y(_014_)
  );
  NOR _183_ (
    .A(_012_),
    .B(_014_),
    .Y(pasoInSend[3])
  );
  NAND _184_ (
    .A(contadorF[2]),
    .B(_076_),
    .Y(_015_)
  );
  NAND _185_ (
    .A(_072_),
    .B(_015_),
    .Y(_016_)
  );
  NOR _186_ (
    .A(data_in),
    .B(_015_),
    .Y(_017_)
  );
  NAND _187_ (
    .A(reset),
    .B(_016_),
    .Y(_018_)
  );
  NOR _188_ (
    .A(_017_),
    .B(_018_),
    .Y(pasoInSend[4])
  );
  NAND _189_ (
    .A(contadorF[2]),
    .B(_082_),
    .Y(_019_)
  );
  NAND _190_ (
    .A(_073_),
    .B(_019_),
    .Y(_020_)
  );
  NOR _191_ (
    .A(data_in),
    .B(_019_),
    .Y(_021_)
  );
  NOR _192_ (
    .A(_069_),
    .B(_021_),
    .Y(_022_)
  );
  NAND _193_ (
    .A(_020_),
    .B(_022_),
    .Y(_023_)
  );
  NOT _194_ (
    .A(_023_),
    .Y(pasoInSend[5])
  );
  NAND _195_ (
    .A(contadorF[2]),
    .B(_010_),
    .Y(_024_)
  );
  NAND _196_ (
    .A(_075_),
    .B(_024_),
    .Y(_025_)
  );
  NOR _197_ (
    .A(data_in),
    .B(_024_),
    .Y(_026_)
  );
  NOR _198_ (
    .A(_069_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _199_ (
    .A(_025_),
    .B(_027_),
    .Y(_028_)
  );
  NOT _200_ (
    .A(_028_),
    .Y(pasoInSend[7])
  );
  NAND _201_ (
    .A(pasoInSend[3]),
    .B(pasoInSend[4]),
    .Y(_029_)
  );
  NOT _202_ (
    .A(_029_),
    .Y(_030_)
  );
  NOR _203_ (
    .A(_023_),
    .B(_028_),
    .Y(_031_)
  );
  NAND _204_ (
    .A(pasoInSend[5]),
    .B(pasoInSend[7]),
    .Y(_032_)
  );
  NOR _205_ (
    .A(_029_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _206_ (
    .A(_030_),
    .B(_031_),
    .Y(_034_)
  );
  NOR _207_ (
    .A(pasoInSend[0]),
    .B(pasoInSend[1]),
    .Y(_035_)
  );
  NOT _208_ (
    .A(_035_),
    .Y(_036_)
  );
  NOR _209_ (
    .A(pasoInSend[6]),
    .B(_111_),
    .Y(_037_)
  );
  NAND _210_ (
    .A(_092_),
    .B(pasoInSend[2]),
    .Y(_038_)
  );
  NOR _211_ (
    .A(_036_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _212_ (
    .A(_035_),
    .B(_037_),
    .Y(_040_)
  );
  NOR _213_ (
    .A(_034_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _214_ (
    .A(_033_),
    .B(_039_),
    .Y(_042_)
  );
  NOR _215_ (
    .A(_063_),
    .B(_042_),
    .Y(_043_)
  );
  NAND _216_ (
    .A(BC_counter[0]),
    .B(_041_),
    .Y(_044_)
  );
  NAND _217_ (
    .A(_063_),
    .B(_042_),
    .Y(_045_)
  );
  NAND _218_ (
    .A(reset),
    .B(_045_),
    .Y(_046_)
  );
  NOR _219_ (
    .A(_043_),
    .B(_046_),
    .Y(_000_[0])
  );
  NOR _220_ (
    .A(_064_),
    .B(_044_),
    .Y(_047_)
  );
  NAND _221_ (
    .A(BC_counter[1]),
    .B(_043_),
    .Y(_048_)
  );
  NOR _222_ (
    .A(BC_counter[1]),
    .B(_043_),
    .Y(_049_)
  );
  NOR _223_ (
    .A(_069_),
    .B(_049_),
    .Y(_050_)
  );
  NAND _224_ (
    .A(_048_),
    .B(_050_),
    .Y(_051_)
  );
  NOT _225_ (
    .A(_051_),
    .Y(_000_[1])
  );
  NOR _226_ (
    .A(BC_counter[2]),
    .B(_047_),
    .Y(_052_)
  );
  NOR _227_ (
    .A(_095_),
    .B(_042_),
    .Y(_053_)
  );
  NOR _228_ (
    .A(_069_),
    .B(_053_),
    .Y(_054_)
  );
  NAND _229_ (
    .A(BC_counter[2]),
    .B(_047_),
    .Y(_055_)
  );
  NAND _230_ (
    .A(_054_),
    .B(_055_),
    .Y(_056_)
  );
  NOR _231_ (
    .A(_052_),
    .B(_056_),
    .Y(_000_[2])
  );
  NOR _232_ (
    .A(_065_),
    .B(_055_),
    .Y(_057_)
  );
  NAND _233_ (
    .A(_065_),
    .B(_055_),
    .Y(_058_)
  );
  NAND _234_ (
    .A(reset),
    .B(_058_),
    .Y(_059_)
  );
  NOR _235_ (
    .A(_057_),
    .B(_059_),
    .Y(_000_[3])
  );
  NAND _236_ (
    .A(contadorF[0]),
    .B(reset),
    .Y(_001_[0])
  );
  NOR _237_ (
    .A(_069_),
    .B(_076_),
    .Y(_060_)
  );
  NAND _238_ (
    .A(_112_),
    .B(_060_),
    .Y(_001_[1])
  );
  NAND _239_ (
    .A(contadorF[2]),
    .B(_077_),
    .Y(_061_)
  );
  NOR _240_ (
    .A(_069_),
    .B(_078_),
    .Y(_062_)
  );
  NAND _241_ (
    .A(_061_),
    .B(_062_),
    .Y(_001_[2])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _242_ (
    .C(clk_f),
    .D(pasoInSend[0]),
    .Q(data2send[0])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _243_ (
    .C(clk_f),
    .D(pasoInSend[1]),
    .Q(data2send[1])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _244_ (
    .C(clk_f),
    .D(pasoInSend[2]),
    .Q(data2send[2])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _245_ (
    .C(clk_f),
    .D(pasoInSend[3]),
    .Q(data2send[3])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _246_ (
    .C(clk_f),
    .D(pasoInSend[4]),
    .Q(data2send[4])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _247_ (
    .C(clk_f),
    .D(pasoInSend[5]),
    .Q(data2send[5])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _248_ (
    .C(clk_f),
    .D(pasoInSend[6]),
    .Q(data2send[6])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _249_ (
    .C(clk_f),
    .D(pasoInSend[7]),
    .Q(data2send[7])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _250_ (
    .C(clk_f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _251_ (
    .C(clk_f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _252_ (
    .C(clk_f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "SerieParalelo_synth.v:25" *)
  DFF _253_ (
    .C(clk_f),
    .D(_000_[3]),
    .Q(BC_counter[3])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _254_ (
    .C(clk_8f),
    .D(pasoInSend[0]),
    .Q(pasoInSendF[0])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _255_ (
    .C(clk_8f),
    .D(pasoInSend[1]),
    .Q(pasoInSendF[1])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _256_ (
    .C(clk_8f),
    .D(pasoInSend[2]),
    .Q(pasoInSendF[2])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _257_ (
    .C(clk_8f),
    .D(pasoInSend[3]),
    .Q(pasoInSendF[3])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _258_ (
    .C(clk_8f),
    .D(pasoInSend[4]),
    .Q(pasoInSendF[4])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _259_ (
    .C(clk_8f),
    .D(pasoInSend[5]),
    .Q(pasoInSendF[5])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _260_ (
    .C(clk_8f),
    .D(pasoInSend[6]),
    .Q(pasoInSendF[6])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _261_ (
    .C(clk_8f),
    .D(pasoInSend[7]),
    .Q(pasoInSendF[7])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _262_ (
    .C(clk_8f),
    .D(active),
    .Q(activeF)
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _263_ (
    .C(clk_8f),
    .D(_001_[0]),
    .Q(contadorF[0])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _264_ (
    .C(clk_8f),
    .D(_001_[1]),
    .Q(contadorF[1])
  );
  (* src = "SerieParalelo_synth.v:17" *)
  DFF _265_ (
    .C(clk_8f),
    .D(_001_[2]),
    .Q(contadorF[2])
  );
  assign _113_ = pasoInSend[0];
  assign _114_ = pasoInSend[1];
  assign _119_ = pasoInSend[6];
  assign _121_ = valid_out;
  assign _009_ = active;
  assign _115_ = pasoInSend[2];
  assign _116_ = pasoInSend[3];
  assign _117_ = pasoInSend[4];
  assign _118_ = pasoInSend[5];
  assign _120_ = pasoInSend[7];
  assign _002_ = _000_[0];
  assign _003_ = _000_[1];
  assign _004_ = _000_[2];
  assign _005_ = _000_[3];
  assign _006_ = _001_[0];
  assign _007_ = _001_[1];
  assign _008_ = _001_[2];
endmodule

(* src = "demux_synth.v:1" *)
module demux_synth(clk_2f, reset, data_out_0_synth, data_out_1_synth, data_in, valid_in, valid_out_0_synth, valid_out_1_synth);
  (* src = "demux_synth.v:12" *)
  wire [7:0] _000_;
  (* src = "demux_synth.v:12" *)
  wire [7:0] _001_;
  (* src = "demux_synth.v:12" *)
  wire _002_;
  (* src = "demux_synth.v:12" *)
  wire _003_;
  (* src = "demux_synth.v:12" *)
  wire _004_;
  (* src = "demux_synth.v:12" *)
  wire _005_;
  (* src = "demux_synth.v:12" *)
  wire _006_;
  (* src = "demux_synth.v:12" *)
  wire _007_;
  (* src = "demux_synth.v:12" *)
  wire _008_;
  (* src = "demux_synth.v:12" *)
  wire _009_;
  (* src = "demux_synth.v:12" *)
  wire _010_;
  (* src = "demux_synth.v:12" *)
  wire _011_;
  (* src = "demux_synth.v:12" *)
  wire _012_;
  (* src = "demux_synth.v:12" *)
  wire _013_;
  (* src = "demux_synth.v:12" *)
  wire _014_;
  (* src = "demux_synth.v:12" *)
  wire _015_;
  (* src = "demux_synth.v:12" *)
  wire _016_;
  (* src = "demux_synth.v:12" *)
  wire _017_;
  (* src = "demux_synth.v:12" *)
  wire _018_;
  (* src = "demux_synth.v:12" *)
  wire _019_;
  (* src = "demux_synth.v:12" *)
  wire _020_;
  (* src = "demux_synth.v:12" *)
  wire _021_;
  (* src = "demux_synth.v:12" *)
  wire _022_;
  (* src = "demux_synth.v:12" *)
  wire _023_;
  (* src = "demux_synth.v:12" *)
  wire _024_;
  (* src = "demux_synth.v:12" *)
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  (* src = "demux_synth.v:2" *)
  input clk_2f;
  (* src = "demux_synth.v:6" *)
  input [7:0] data_in;
  (* src = "demux_synth.v:4" *)
  output [7:0] data_out_0_synth;
  (* src = "demux_synth.v:5" *)
  output [7:0] data_out_1_synth;
  (* src = "demux_synth.v:11" *)
  wire flag;
  (* src = "demux_synth.v:3" *)
  input reset;
  (* src = "demux_synth.v:11" *)
  wire selector;
  (* src = "demux_synth.v:7" *)
  input valid_in;
  (* src = "demux_synth.v:8" *)
  output valid_out_0_synth;
  (* src = "demux_synth.v:9" *)
  output valid_out_1_synth;
  NOT _121_ (
    .A(valid_in),
    .Y(_077_)
  );
  NOT _122_ (
    .A(reset),
    .Y(_078_)
  );
  NOT _123_ (
    .A(data_in[0]),
    .Y(_079_)
  );
  NOT _124_ (
    .A(data_out_1_synth[0]),
    .Y(_080_)
  );
  NOT _125_ (
    .A(flag),
    .Y(_081_)
  );
  NOT _126_ (
    .A(data_in[1]),
    .Y(_082_)
  );
  NOT _127_ (
    .A(data_out_1_synth[1]),
    .Y(_083_)
  );
  NOT _128_ (
    .A(data_in[2]),
    .Y(_084_)
  );
  NOT _129_ (
    .A(data_out_1_synth[2]),
    .Y(_085_)
  );
  NOT _130_ (
    .A(data_in[3]),
    .Y(_086_)
  );
  NOT _131_ (
    .A(data_out_1_synth[3]),
    .Y(_087_)
  );
  NOT _132_ (
    .A(data_in[4]),
    .Y(_088_)
  );
  NOT _133_ (
    .A(data_out_1_synth[4]),
    .Y(_089_)
  );
  NOT _134_ (
    .A(data_in[5]),
    .Y(_090_)
  );
  NOT _135_ (
    .A(data_out_1_synth[5]),
    .Y(_091_)
  );
  NOT _136_ (
    .A(data_in[6]),
    .Y(_092_)
  );
  NOT _137_ (
    .A(data_out_1_synth[6]),
    .Y(_093_)
  );
  NOT _138_ (
    .A(data_in[7]),
    .Y(_094_)
  );
  NOT _139_ (
    .A(data_out_1_synth[7]),
    .Y(_095_)
  );
  NOT _140_ (
    .A(selector),
    .Y(_096_)
  );
  NOT _141_ (
    .A(valid_out_0_synth),
    .Y(_097_)
  );
  NAND _142_ (
    .A(valid_in),
    .B(reset),
    .Y(_098_)
  );
  NOT _143_ (
    .A(_098_),
    .Y(_002_)
  );
  NAND _144_ (
    .A(valid_in),
    .B(selector),
    .Y(_099_)
  );
  NOT _145_ (
    .A(_099_),
    .Y(_100_)
  );
  NAND _146_ (
    .A(valid_in),
    .B(_096_),
    .Y(_101_)
  );
  NOR _147_ (
    .A(_081_),
    .B(_101_),
    .Y(_102_)
  );
  NOR _148_ (
    .A(_100_),
    .B(_102_),
    .Y(_103_)
  );
  NOR _149_ (
    .A(_077_),
    .B(flag),
    .Y(_104_)
  );
  NOR _150_ (
    .A(flag),
    .B(_099_),
    .Y(_105_)
  );
  NOR _151_ (
    .A(_102_),
    .B(_105_),
    .Y(_106_)
  );
  NAND _152_ (
    .A(_080_),
    .B(_106_),
    .Y(_107_)
  );
  NOR _153_ (
    .A(data_in[0]),
    .B(_106_),
    .Y(_108_)
  );
  NAND _154_ (
    .A(reset),
    .B(_107_),
    .Y(_109_)
  );
  NOR _155_ (
    .A(_108_),
    .B(_109_),
    .Y(_001_[0])
  );
  NAND _156_ (
    .A(_083_),
    .B(_106_),
    .Y(_110_)
  );
  NOR _157_ (
    .A(data_in[1]),
    .B(_106_),
    .Y(_111_)
  );
  NAND _158_ (
    .A(reset),
    .B(_110_),
    .Y(_112_)
  );
  NOR _159_ (
    .A(_111_),
    .B(_112_),
    .Y(_001_[1])
  );
  NAND _160_ (
    .A(_085_),
    .B(_106_),
    .Y(_113_)
  );
  NOR _161_ (
    .A(data_in[2]),
    .B(_106_),
    .Y(_114_)
  );
  NAND _162_ (
    .A(reset),
    .B(_113_),
    .Y(_115_)
  );
  NOR _163_ (
    .A(_114_),
    .B(_115_),
    .Y(_001_[2])
  );
  NAND _164_ (
    .A(_087_),
    .B(_106_),
    .Y(_116_)
  );
  NOR _165_ (
    .A(data_in[3]),
    .B(_106_),
    .Y(_117_)
  );
  NAND _166_ (
    .A(reset),
    .B(_116_),
    .Y(_118_)
  );
  NOR _167_ (
    .A(_117_),
    .B(_118_),
    .Y(_001_[3])
  );
  NAND _168_ (
    .A(_089_),
    .B(_106_),
    .Y(_119_)
  );
  NOR _169_ (
    .A(data_in[4]),
    .B(_106_),
    .Y(_120_)
  );
  NAND _170_ (
    .A(reset),
    .B(_119_),
    .Y(_026_)
  );
  NOR _171_ (
    .A(_120_),
    .B(_026_),
    .Y(_001_[4])
  );
  NAND _172_ (
    .A(_091_),
    .B(_106_),
    .Y(_027_)
  );
  NOR _173_ (
    .A(data_in[5]),
    .B(_106_),
    .Y(_028_)
  );
  NAND _174_ (
    .A(reset),
    .B(_027_),
    .Y(_029_)
  );
  NOR _175_ (
    .A(_028_),
    .B(_029_),
    .Y(_001_[5])
  );
  NAND _176_ (
    .A(_093_),
    .B(_106_),
    .Y(_030_)
  );
  NOR _177_ (
    .A(data_in[6]),
    .B(_106_),
    .Y(_031_)
  );
  NAND _178_ (
    .A(reset),
    .B(_030_),
    .Y(_032_)
  );
  NOR _179_ (
    .A(_031_),
    .B(_032_),
    .Y(_001_[6])
  );
  NOR _180_ (
    .A(_095_),
    .B(_102_),
    .Y(_033_)
  );
  NOR _181_ (
    .A(data_in[7]),
    .B(_100_),
    .Y(_034_)
  );
  NOR _182_ (
    .A(_103_),
    .B(_034_),
    .Y(_035_)
  );
  NOR _183_ (
    .A(_033_),
    .B(_035_),
    .Y(_036_)
  );
  NOR _184_ (
    .A(flag),
    .B(_094_),
    .Y(_037_)
  );
  NAND _185_ (
    .A(flag),
    .B(data_out_1_synth[7]),
    .Y(_038_)
  );
  NOT _186_ (
    .A(_038_),
    .Y(_039_)
  );
  NOR _187_ (
    .A(_037_),
    .B(_039_),
    .Y(_040_)
  );
  NAND _188_ (
    .A(_100_),
    .B(_040_),
    .Y(_041_)
  );
  NAND _189_ (
    .A(reset),
    .B(_041_),
    .Y(_042_)
  );
  NOR _190_ (
    .A(_036_),
    .B(_042_),
    .Y(_001_[7])
  );
  NOR _191_ (
    .A(flag),
    .B(_101_),
    .Y(_043_)
  );
  NOR _192_ (
    .A(_100_),
    .B(_104_),
    .Y(_044_)
  );
  NOR _193_ (
    .A(_105_),
    .B(_044_),
    .Y(_045_)
  );
  NAND _194_ (
    .A(_079_),
    .B(_045_),
    .Y(_046_)
  );
  NOR _195_ (
    .A(data_out_0_synth[0]),
    .B(_045_),
    .Y(_047_)
  );
  NAND _196_ (
    .A(reset),
    .B(_046_),
    .Y(_048_)
  );
  NOR _197_ (
    .A(_047_),
    .B(_048_),
    .Y(_000_[0])
  );
  NAND _198_ (
    .A(_082_),
    .B(_045_),
    .Y(_049_)
  );
  NOR _199_ (
    .A(data_out_0_synth[1]),
    .B(_045_),
    .Y(_050_)
  );
  NAND _200_ (
    .A(reset),
    .B(_049_),
    .Y(_051_)
  );
  NOR _201_ (
    .A(_050_),
    .B(_051_),
    .Y(_000_[1])
  );
  NAND _202_ (
    .A(_084_),
    .B(_045_),
    .Y(_052_)
  );
  NOR _203_ (
    .A(data_out_0_synth[2]),
    .B(_045_),
    .Y(_053_)
  );
  NAND _204_ (
    .A(reset),
    .B(_052_),
    .Y(_054_)
  );
  NOR _205_ (
    .A(_053_),
    .B(_054_),
    .Y(_000_[2])
  );
  NAND _206_ (
    .A(_086_),
    .B(_045_),
    .Y(_055_)
  );
  NOR _207_ (
    .A(data_out_0_synth[3]),
    .B(_045_),
    .Y(_056_)
  );
  NAND _208_ (
    .A(reset),
    .B(_055_),
    .Y(_057_)
  );
  NOR _209_ (
    .A(_056_),
    .B(_057_),
    .Y(_000_[3])
  );
  NAND _210_ (
    .A(_088_),
    .B(_045_),
    .Y(_058_)
  );
  NOR _211_ (
    .A(data_out_0_synth[4]),
    .B(_045_),
    .Y(_059_)
  );
  NAND _212_ (
    .A(reset),
    .B(_058_),
    .Y(_060_)
  );
  NOR _213_ (
    .A(_059_),
    .B(_060_),
    .Y(_000_[4])
  );
  NAND _214_ (
    .A(_090_),
    .B(_045_),
    .Y(_061_)
  );
  NOR _215_ (
    .A(data_out_0_synth[5]),
    .B(_045_),
    .Y(_062_)
  );
  NAND _216_ (
    .A(reset),
    .B(_061_),
    .Y(_063_)
  );
  NOR _217_ (
    .A(_062_),
    .B(_063_),
    .Y(_000_[5])
  );
  NAND _218_ (
    .A(_092_),
    .B(_045_),
    .Y(_064_)
  );
  NOR _219_ (
    .A(data_out_0_synth[6]),
    .B(_045_),
    .Y(_065_)
  );
  NAND _220_ (
    .A(reset),
    .B(_064_),
    .Y(_066_)
  );
  NOR _221_ (
    .A(_065_),
    .B(_066_),
    .Y(_000_[6])
  );
  NAND _222_ (
    .A(_094_),
    .B(_045_),
    .Y(_067_)
  );
  NOR _223_ (
    .A(data_out_0_synth[7]),
    .B(_045_),
    .Y(_068_)
  );
  NAND _224_ (
    .A(reset),
    .B(_067_),
    .Y(_069_)
  );
  NOR _225_ (
    .A(_068_),
    .B(_069_),
    .Y(_000_[7])
  );
  NOR _226_ (
    .A(_096_),
    .B(_104_),
    .Y(_070_)
  );
  NOR _227_ (
    .A(_043_),
    .B(_070_),
    .Y(_071_)
  );
  NOR _228_ (
    .A(_078_),
    .B(_071_),
    .Y(_003_)
  );
  NOR _229_ (
    .A(_081_),
    .B(valid_out_1_synth),
    .Y(_072_)
  );
  NOR _230_ (
    .A(_099_),
    .B(_072_),
    .Y(_073_)
  );
  NOR _231_ (
    .A(_102_),
    .B(_073_),
    .Y(_074_)
  );
  NOR _232_ (
    .A(_078_),
    .B(_074_),
    .Y(_005_)
  );
  NOR _233_ (
    .A(_097_),
    .B(_101_),
    .Y(_075_)
  );
  NOR _234_ (
    .A(_045_),
    .B(_075_),
    .Y(_076_)
  );
  NOR _235_ (
    .A(_078_),
    .B(_076_),
    .Y(_004_)
  );
  (* src = "demux_synth.v:12" *)
  DFF _236_ (
    .C(clk_2f),
    .D(_004_),
    .Q(valid_out_0_synth)
  );
  (* src = "demux_synth.v:12" *)
  DFF _237_ (
    .C(clk_2f),
    .D(_005_),
    .Q(valid_out_1_synth)
  );
  (* src = "demux_synth.v:12" *)
  DFF _238_ (
    .C(clk_2f),
    .D(_003_),
    .Q(selector)
  );
  (* src = "demux_synth.v:12" *)
  DFF _239_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out_0_synth[0])
  );
  (* src = "demux_synth.v:12" *)
  DFF _240_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out_0_synth[1])
  );
  (* src = "demux_synth.v:12" *)
  DFF _241_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out_0_synth[2])
  );
  (* src = "demux_synth.v:12" *)
  DFF _242_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out_0_synth[3])
  );
  (* src = "demux_synth.v:12" *)
  DFF _243_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out_0_synth[4])
  );
  (* src = "demux_synth.v:12" *)
  DFF _244_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out_0_synth[5])
  );
  (* src = "demux_synth.v:12" *)
  DFF _245_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out_0_synth[6])
  );
  (* src = "demux_synth.v:12" *)
  DFF _246_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out_0_synth[7])
  );
  (* src = "demux_synth.v:12" *)
  DFF _247_ (
    .C(clk_2f),
    .D(_001_[0]),
    .Q(data_out_1_synth[0])
  );
  (* src = "demux_synth.v:12" *)
  DFF _248_ (
    .C(clk_2f),
    .D(_001_[1]),
    .Q(data_out_1_synth[1])
  );
  (* src = "demux_synth.v:12" *)
  DFF _249_ (
    .C(clk_2f),
    .D(_001_[2]),
    .Q(data_out_1_synth[2])
  );
  (* src = "demux_synth.v:12" *)
  DFF _250_ (
    .C(clk_2f),
    .D(_001_[3]),
    .Q(data_out_1_synth[3])
  );
  (* src = "demux_synth.v:12" *)
  DFF _251_ (
    .C(clk_2f),
    .D(_001_[4]),
    .Q(data_out_1_synth[4])
  );
  (* src = "demux_synth.v:12" *)
  DFF _252_ (
    .C(clk_2f),
    .D(_001_[5]),
    .Q(data_out_1_synth[5])
  );
  (* src = "demux_synth.v:12" *)
  DFF _253_ (
    .C(clk_2f),
    .D(_001_[6]),
    .Q(data_out_1_synth[6])
  );
  (* src = "demux_synth.v:12" *)
  DFF _254_ (
    .C(clk_2f),
    .D(_001_[7]),
    .Q(data_out_1_synth[7])
  );
  (* src = "demux_synth.v:12" *)
  DFF _255_ (
    .C(clk_2f),
    .D(_002_),
    .Q(flag)
  );
  assign _022_ = _002_;
  assign _014_ = _001_[0];
  assign _015_ = _001_[1];
  assign _016_ = _001_[2];
  assign _017_ = _001_[3];
  assign _018_ = _001_[4];
  assign _019_ = _001_[5];
  assign _020_ = _001_[6];
  assign _021_ = _001_[7];
  assign _006_ = _000_[0];
  assign _007_ = _000_[1];
  assign _008_ = _000_[2];
  assign _009_ = _000_[3];
  assign _010_ = _000_[4];
  assign _011_ = _000_[5];
  assign _012_ = _000_[6];
  assign _013_ = _000_[7];
  assign _023_ = _003_;
  assign _025_ = _005_;
  assign _024_ = _004_;
endmodule

(* src = "etapa2_flops_synth.v:1" *)
module etapa2_flops_synth(data_in0, valid_in0, data_out0, valid_out0, clk_8f, reset);
  (* src = "etapa2_flops_synth.v:10" *)
  wire [7:0] _00_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _01_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _02_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _03_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _04_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _05_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _06_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _07_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _08_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _09_;
  (* src = "etapa2_flops_synth.v:10" *)
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  (* src = "etapa2_flops_synth.v:6" *)
  input clk_8f;
  (* src = "etapa2_flops_synth.v:2" *)
  input [7:0] data_in0;
  (* src = "etapa2_flops_synth.v:4" *)
  output [7:0] data_out0;
  (* src = "etapa2_flops_synth.v:7" *)
  input reset;
  (* src = "etapa2_flops_synth.v:3" *)
  input valid_in0;
  (* src = "etapa2_flops_synth.v:5" *)
  output valid_out0;
  NAND _20_ (
    .A(data_in0[0]),
    .B(reset),
    .Y(_11_)
  );
  NOT _21_ (
    .A(_11_),
    .Y(_00_[0])
  );
  NAND _22_ (
    .A(reset),
    .B(data_in0[1]),
    .Y(_12_)
  );
  NOT _23_ (
    .A(_12_),
    .Y(_00_[1])
  );
  NAND _24_ (
    .A(reset),
    .B(data_in0[2]),
    .Y(_13_)
  );
  NOT _25_ (
    .A(_13_),
    .Y(_00_[2])
  );
  NAND _26_ (
    .A(reset),
    .B(data_in0[3]),
    .Y(_14_)
  );
  NOT _27_ (
    .A(_14_),
    .Y(_00_[3])
  );
  NAND _28_ (
    .A(reset),
    .B(data_in0[4]),
    .Y(_15_)
  );
  NOT _29_ (
    .A(_15_),
    .Y(_00_[4])
  );
  NAND _30_ (
    .A(reset),
    .B(data_in0[5]),
    .Y(_16_)
  );
  NOT _31_ (
    .A(_16_),
    .Y(_00_[5])
  );
  NAND _32_ (
    .A(reset),
    .B(data_in0[6]),
    .Y(_17_)
  );
  NOT _33_ (
    .A(_17_),
    .Y(_00_[6])
  );
  NAND _34_ (
    .A(reset),
    .B(data_in0[7]),
    .Y(_18_)
  );
  NOT _35_ (
    .A(_18_),
    .Y(_00_[7])
  );
  NAND _36_ (
    .A(reset),
    .B(valid_in0),
    .Y(_19_)
  );
  NOT _37_ (
    .A(_19_),
    .Y(_01_)
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _38_ (
    .C(clk_8f),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _39_ (
    .C(clk_8f),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _40_ (
    .C(clk_8f),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _41_ (
    .C(clk_8f),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _42_ (
    .C(clk_8f),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _43_ (
    .C(clk_8f),
    .D(_00_[5]),
    .Q(data_out0[5])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _44_ (
    .C(clk_8f),
    .D(_00_[6]),
    .Q(data_out0[6])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _45_ (
    .C(clk_8f),
    .D(_00_[7]),
    .Q(data_out0[7])
  );
  (* src = "etapa2_flops_synth.v:10" *)
  DFF _46_ (
    .C(clk_8f),
    .D(_01_),
    .Q(valid_out0)
  );
  assign _02_ = _00_[0];
  assign _03_ = _00_[1];
  assign _04_ = _00_[2];
  assign _05_ = _00_[3];
  assign _06_ = _00_[4];
  assign _07_ = _00_[5];
  assign _08_ = _00_[6];
  assign _09_ = _00_[7];
  assign _10_ = _01_;
endmodule

(* src = "etapa_flops_synth.v:1" *)
module etapa_flops_synth(data_in0, data_in1, valid_in0, valid_in1, data_out0, data_out1, valid_out0, valid_out1, clk_2f, reset);
  (* src = "etapa_flops_synth.v:14" *)
  wire [7:0] _00_;
  (* src = "etapa_flops_synth.v:14" *)
  wire [7:0] _01_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _02_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _03_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _04_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _05_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _06_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _07_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _08_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _09_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _10_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _11_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _12_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _13_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _14_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _15_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _16_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _17_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _18_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _19_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _20_;
  (* src = "etapa_flops_synth.v:14" *)
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  (* src = "etapa_flops_synth.v:10" *)
  input clk_2f;
  (* src = "etapa_flops_synth.v:2" *)
  input [7:0] data_in0;
  (* src = "etapa_flops_synth.v:3" *)
  input [7:0] data_in1;
  (* src = "etapa_flops_synth.v:6" *)
  output [7:0] data_out0;
  (* src = "etapa_flops_synth.v:7" *)
  output [7:0] data_out1;
  (* src = "etapa_flops_synth.v:11" *)
  input reset;
  (* src = "etapa_flops_synth.v:4" *)
  input valid_in0;
  (* src = "etapa_flops_synth.v:5" *)
  input valid_in1;
  (* src = "etapa_flops_synth.v:8" *)
  output valid_out0;
  (* src = "etapa_flops_synth.v:9" *)
  output valid_out1;
  NAND _40_ (
    .A(valid_in1),
    .B(reset),
    .Y(_22_)
  );
  NOT _41_ (
    .A(_22_),
    .Y(_03_)
  );
  NAND _42_ (
    .A(reset),
    .B(data_in0[0]),
    .Y(_23_)
  );
  NOT _43_ (
    .A(_23_),
    .Y(_00_[0])
  );
  NAND _44_ (
    .A(reset),
    .B(data_in0[1]),
    .Y(_24_)
  );
  NOT _45_ (
    .A(_24_),
    .Y(_00_[1])
  );
  NAND _46_ (
    .A(reset),
    .B(data_in0[2]),
    .Y(_25_)
  );
  NOT _47_ (
    .A(_25_),
    .Y(_00_[2])
  );
  NAND _48_ (
    .A(reset),
    .B(data_in0[3]),
    .Y(_26_)
  );
  NOT _49_ (
    .A(_26_),
    .Y(_00_[3])
  );
  NAND _50_ (
    .A(reset),
    .B(data_in0[4]),
    .Y(_27_)
  );
  NOT _51_ (
    .A(_27_),
    .Y(_00_[4])
  );
  NAND _52_ (
    .A(reset),
    .B(data_in0[5]),
    .Y(_28_)
  );
  NOT _53_ (
    .A(_28_),
    .Y(_00_[5])
  );
  NAND _54_ (
    .A(reset),
    .B(data_in0[6]),
    .Y(_29_)
  );
  NOT _55_ (
    .A(_29_),
    .Y(_00_[6])
  );
  NAND _56_ (
    .A(reset),
    .B(data_in0[7]),
    .Y(_30_)
  );
  NOT _57_ (
    .A(_30_),
    .Y(_00_[7])
  );
  NAND _58_ (
    .A(reset),
    .B(data_in1[0]),
    .Y(_31_)
  );
  NOT _59_ (
    .A(_31_),
    .Y(_01_[0])
  );
  NAND _60_ (
    .A(reset),
    .B(data_in1[1]),
    .Y(_32_)
  );
  NOT _61_ (
    .A(_32_),
    .Y(_01_[1])
  );
  NAND _62_ (
    .A(reset),
    .B(data_in1[2]),
    .Y(_33_)
  );
  NOT _63_ (
    .A(_33_),
    .Y(_01_[2])
  );
  NAND _64_ (
    .A(reset),
    .B(data_in1[3]),
    .Y(_34_)
  );
  NOT _65_ (
    .A(_34_),
    .Y(_01_[3])
  );
  NAND _66_ (
    .A(reset),
    .B(data_in1[4]),
    .Y(_35_)
  );
  NOT _67_ (
    .A(_35_),
    .Y(_01_[4])
  );
  NAND _68_ (
    .A(reset),
    .B(data_in1[5]),
    .Y(_36_)
  );
  NOT _69_ (
    .A(_36_),
    .Y(_01_[5])
  );
  NAND _70_ (
    .A(reset),
    .B(data_in1[6]),
    .Y(_37_)
  );
  NOT _71_ (
    .A(_37_),
    .Y(_01_[6])
  );
  NAND _72_ (
    .A(reset),
    .B(data_in1[7]),
    .Y(_38_)
  );
  NOT _73_ (
    .A(_38_),
    .Y(_01_[7])
  );
  NAND _74_ (
    .A(reset),
    .B(valid_in0),
    .Y(_39_)
  );
  NOT _75_ (
    .A(_39_),
    .Y(_02_)
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _76_ (
    .C(clk_2f),
    .D(_01_[0]),
    .Q(data_out1[0])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _77_ (
    .C(clk_2f),
    .D(_01_[1]),
    .Q(data_out1[1])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _78_ (
    .C(clk_2f),
    .D(_01_[2]),
    .Q(data_out1[2])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _79_ (
    .C(clk_2f),
    .D(_01_[3]),
    .Q(data_out1[3])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _80_ (
    .C(clk_2f),
    .D(_01_[4]),
    .Q(data_out1[4])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _81_ (
    .C(clk_2f),
    .D(_01_[5]),
    .Q(data_out1[5])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _82_ (
    .C(clk_2f),
    .D(_01_[6]),
    .Q(data_out1[6])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _83_ (
    .C(clk_2f),
    .D(_01_[7]),
    .Q(data_out1[7])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _84_ (
    .C(clk_2f),
    .D(_00_[0]),
    .Q(data_out0[0])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _85_ (
    .C(clk_2f),
    .D(_00_[1]),
    .Q(data_out0[1])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _86_ (
    .C(clk_2f),
    .D(_00_[2]),
    .Q(data_out0[2])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _87_ (
    .C(clk_2f),
    .D(_00_[3]),
    .Q(data_out0[3])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _88_ (
    .C(clk_2f),
    .D(_00_[4]),
    .Q(data_out0[4])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _89_ (
    .C(clk_2f),
    .D(_00_[5]),
    .Q(data_out0[5])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _90_ (
    .C(clk_2f),
    .D(_00_[6]),
    .Q(data_out0[6])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _91_ (
    .C(clk_2f),
    .D(_00_[7]),
    .Q(data_out0[7])
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _92_ (
    .C(clk_2f),
    .D(_02_),
    .Q(valid_out0)
  );
  (* src = "etapa_flops_synth.v:14" *)
  DFF _93_ (
    .C(clk_2f),
    .D(_03_),
    .Q(valid_out1)
  );
  assign _21_ = _03_;
  assign _04_ = _00_[0];
  assign _05_ = _00_[1];
  assign _06_ = _00_[2];
  assign _07_ = _00_[3];
  assign _08_ = _00_[4];
  assign _09_ = _00_[5];
  assign _10_ = _00_[6];
  assign _11_ = _00_[7];
  assign _12_ = _01_[0];
  assign _13_ = _01_[1];
  assign _14_ = _01_[2];
  assign _15_ = _01_[3];
  assign _16_ = _01_[4];
  assign _17_ = _01_[5];
  assign _18_ = _01_[6];
  assign _19_ = _01_[7];
  assign _20_ = _02_;
endmodule

(* top =  1  *)
(* src = "synth.v:6" *)
module synth(clk_f, clk_2f, clk_8f, data_in0, data_in1, reset, data_out_0_synth, data_out_1_synth, valid_out_0_synth, valid_out_1_synth);
  (* src = "synth.v:20" *)
  (* unused_bits = "0 1 2 3" *)
  wire [3:0] BC_counter0;
  (* src = "synth.v:20" *)
  (* unused_bits = "0 1 2 3" *)
  wire [3:0] BC_counter1;
  (* src = "synth.v:21" *)
  (* unused_bits = "0" *)
  wire active0;
  (* src = "synth.v:21" *)
  (* unused_bits = "0" *)
  wire active1;
  (* src = "synth.v:8" *)
  input clk_2f;
  (* src = "synth.v:9" *)
  input clk_8f;
  (* src = "synth.v:7" *)
  input clk_f;
  (* src = "synth.v:19" *)
  wire [7:0] d_out_F;
  (* src = "synth.v:19" *)
  wire [7:0] d_out_us;
  (* src = "synth.v:19" *)
  wire [7:0] data2send0;
  (* src = "synth.v:19" *)
  wire [7:0] data2send1;
  (* src = "synth.v:10" *)
  input data_in0;
  (* src = "synth.v:11" *)
  input data_in1;
  (* src = "synth.v:13" *)
  output [7:0] data_out_0_synth;
  (* src = "synth.v:14" *)
  output [7:0] data_out_1_synth;
  (* src = "synth.v:19" *)
  wire [7:0] out_0F;
  (* src = "synth.v:19" *)
  wire [7:0] out_1F;
  (* src = "synth.v:12" *)
  input reset;
  (* src = "synth.v:21" *)
  wire v_out_F;
  (* src = "synth.v:21" *)
  wire v_out_us;
  (* src = "synth.v:15" *)
  output valid_out_0_synth;
  (* src = "synth.v:16" *)
  output valid_out_1_synth;
  (* src = "synth.v:21" *)
  wire valid_out_sp0;
  (* src = "synth.v:21" *)
  wire valid_out_sp1;
  (* src = "synth.v:21" *)
  wire vout_0F;
  (* src = "synth.v:21" *)
  wire vout_1F;
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:60" *)
  demux_synth demux_synth (
    .clk_2f(clk_2f),
    .data_in(d_out_F),
    .data_out_0_synth(out_0F),
    .data_out_1_synth(out_1F),
    .reset(reset),
    .valid_in(v_out_F),
    .valid_out_0_synth(vout_0F),
    .valid_out_1_synth(vout_1F)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:53" *)
  etapa2_flops_synth flops (
    .clk_8f(clk_8f),
    .data_in0(d_out_us),
    .data_out0(d_out_F),
    .reset(reset),
    .valid_in0(v_out_us),
    .valid_out0(v_out_F)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:69" *)
  etapa_flops_synth flops2 (
    .clk_2f(clk_2f),
    .data_in0(out_0F),
    .data_in1(out_1F),
    .data_out0(data_out_0_synth),
    .data_out1(data_out_1_synth),
    .reset(reset),
    .valid_in0(vout_0F),
    .valid_in1(vout_1F),
    .valid_out0(valid_out_0_synth),
    .valid_out1(valid_out_1_synth)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:24" *)
  SerieParalelo_synth serieParalelo0 (
    .BC_counter(BC_counter0),
    .active(active0),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send(data2send0),
    .data_in(data_in0),
    .reset(reset),
    .valid_out(valid_out_sp0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:33" *)
  SerieParalelo_synth serieParalelo1 (
    .BC_counter(BC_counter1),
    .active(active1),
    .clk_8f(clk_8f),
    .clk_f(clk_f),
    .data2send(data2send1),
    .data_in(data_in1),
    .reset(reset),
    .valid_out(valid_out_sp1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth.v:43" *)
  unstriping_synth unstriping_synth (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_out(d_out_us),
    .lane_0(data2send0),
    .lane_1(data2send1),
    .reset(reset),
    .valid_0(valid_out_sp0),
    .valid_1(valid_out_sp1),
    .valid_out(v_out_us)
  );
endmodule

(* src = "unstriping_synth.v:1" *)
module unstriping_synth(clk_f, clk_2f, reset, lane_0, valid_0, lane_1, valid_1, data_out, valid_out);
  (* src = "unstriping_synth.v:13" *)
  wire [7:0] _000_;
  (* src = "unstriping_synth.v:13" *)
  wire _001_;
  (* src = "unstriping_synth.v:13" *)
  wire _002_;
  (* src = "unstriping_synth.v:13" *)
  wire _003_;
  (* src = "unstriping_synth.v:13" *)
  wire _004_;
  (* src = "unstriping_synth.v:13" *)
  wire _005_;
  (* src = "unstriping_synth.v:13" *)
  wire _006_;
  (* src = "unstriping_synth.v:13" *)
  wire _007_;
  (* src = "unstriping_synth.v:13" *)
  wire _008_;
  (* src = "unstriping_synth.v:13" *)
  wire _009_;
  (* src = "unstriping_synth.v:13" *)
  wire _010_;
  (* src = "unstriping_synth.v:13" *)
  wire _011_;
  (* src = "unstriping_synth.v:13" *)
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  (* src = "unstriping_synth.v:3" *)
  input clk_2f;
  (* src = "unstriping_synth.v:2" *)
  input clk_f;
  (* src = "unstriping_synth.v:12" *)
  wire contador;
  (* src = "unstriping_synth.v:9" *)
  output [7:0] data_out;
  (* src = "unstriping_synth.v:5" *)
  input [7:0] lane_0;
  (* src = "unstriping_synth.v:7" *)
  input [7:0] lane_1;
  (* src = "unstriping_synth.v:4" *)
  input reset;
  (* src = "unstriping_synth.v:12" *)
  wire selector;
  (* src = "unstriping_synth.v:6" *)
  input valid_0;
  (* src = "unstriping_synth.v:8" *)
  input valid_1;
  (* src = "unstriping_synth.v:10" *)
  output valid_out;
  NOT _073_ (
    .A(data_out[0]),
    .Y(_020_)
  );
  NOT _074_ (
    .A(valid_1),
    .Y(_021_)
  );
  NOT _075_ (
    .A(data_out[1]),
    .Y(_022_)
  );
  NOT _076_ (
    .A(data_out[2]),
    .Y(_023_)
  );
  NOT _077_ (
    .A(data_out[3]),
    .Y(_024_)
  );
  NOT _078_ (
    .A(data_out[4]),
    .Y(_025_)
  );
  NOT _079_ (
    .A(data_out[5]),
    .Y(_026_)
  );
  NOT _080_ (
    .A(data_out[6]),
    .Y(_027_)
  );
  NOT _081_ (
    .A(data_out[7]),
    .Y(_028_)
  );
  NOT _082_ (
    .A(valid_0),
    .Y(_029_)
  );
  NOT _083_ (
    .A(selector),
    .Y(_030_)
  );
  NOT _084_ (
    .A(reset),
    .Y(_031_)
  );
  NOR _085_ (
    .A(_029_),
    .B(selector),
    .Y(_032_)
  );
  NAND _086_ (
    .A(valid_0),
    .B(_030_),
    .Y(_033_)
  );
  NOR _087_ (
    .A(_021_),
    .B(_030_),
    .Y(_034_)
  );
  NAND _088_ (
    .A(valid_1),
    .B(selector),
    .Y(_035_)
  );
  NAND _089_ (
    .A(_033_),
    .B(_035_),
    .Y(_036_)
  );
  NAND _090_ (
    .A(reset),
    .B(_036_),
    .Y(_037_)
  );
  NOT _091_ (
    .A(_037_),
    .Y(_002_)
  );
  NOR _092_ (
    .A(valid_0),
    .B(selector),
    .Y(_038_)
  );
  NAND _093_ (
    .A(reset),
    .B(_035_),
    .Y(_039_)
  );
  NOR _094_ (
    .A(_038_),
    .B(_039_),
    .Y(_001_)
  );
  NOR _095_ (
    .A(_020_),
    .B(_036_),
    .Y(_040_)
  );
  NAND _096_ (
    .A(lane_1[0]),
    .B(_034_),
    .Y(_041_)
  );
  NAND _097_ (
    .A(lane_0[0]),
    .B(_032_),
    .Y(_042_)
  );
  NAND _098_ (
    .A(_041_),
    .B(_042_),
    .Y(_043_)
  );
  NOR _099_ (
    .A(_040_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _100_ (
    .A(_031_),
    .B(_044_),
    .Y(_000_[0])
  );
  NOR _101_ (
    .A(_022_),
    .B(_036_),
    .Y(_045_)
  );
  NAND _102_ (
    .A(lane_1[1]),
    .B(_034_),
    .Y(_046_)
  );
  NAND _103_ (
    .A(lane_0[1]),
    .B(_032_),
    .Y(_047_)
  );
  NAND _104_ (
    .A(_046_),
    .B(_047_),
    .Y(_048_)
  );
  NOR _105_ (
    .A(_045_),
    .B(_048_),
    .Y(_049_)
  );
  NOR _106_ (
    .A(_031_),
    .B(_049_),
    .Y(_000_[1])
  );
  NOR _107_ (
    .A(_023_),
    .B(_036_),
    .Y(_050_)
  );
  NAND _108_ (
    .A(lane_1[2]),
    .B(_034_),
    .Y(_051_)
  );
  NAND _109_ (
    .A(lane_0[2]),
    .B(_032_),
    .Y(_052_)
  );
  NAND _110_ (
    .A(_051_),
    .B(_052_),
    .Y(_053_)
  );
  NOR _111_ (
    .A(_050_),
    .B(_053_),
    .Y(_054_)
  );
  NOR _112_ (
    .A(_031_),
    .B(_054_),
    .Y(_000_[2])
  );
  NOR _113_ (
    .A(_024_),
    .B(_036_),
    .Y(_055_)
  );
  NAND _114_ (
    .A(lane_1[3]),
    .B(_034_),
    .Y(_056_)
  );
  NAND _115_ (
    .A(lane_0[3]),
    .B(_032_),
    .Y(_057_)
  );
  NAND _116_ (
    .A(_056_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _117_ (
    .A(_055_),
    .B(_058_),
    .Y(_059_)
  );
  NOR _118_ (
    .A(_031_),
    .B(_059_),
    .Y(_000_[3])
  );
  NOR _119_ (
    .A(_025_),
    .B(_036_),
    .Y(_060_)
  );
  NAND _120_ (
    .A(lane_1[4]),
    .B(_034_),
    .Y(_061_)
  );
  NAND _121_ (
    .A(lane_0[4]),
    .B(_032_),
    .Y(_062_)
  );
  NAND _122_ (
    .A(_061_),
    .B(_062_),
    .Y(_063_)
  );
  NOR _123_ (
    .A(_060_),
    .B(_063_),
    .Y(_064_)
  );
  NOR _124_ (
    .A(_031_),
    .B(_064_),
    .Y(_000_[4])
  );
  NOR _125_ (
    .A(_026_),
    .B(_036_),
    .Y(_065_)
  );
  NAND _126_ (
    .A(lane_1[5]),
    .B(_034_),
    .Y(_066_)
  );
  NAND _127_ (
    .A(lane_0[5]),
    .B(_032_),
    .Y(_067_)
  );
  NAND _128_ (
    .A(_066_),
    .B(_067_),
    .Y(_068_)
  );
  NOR _129_ (
    .A(_065_),
    .B(_068_),
    .Y(_069_)
  );
  NOR _130_ (
    .A(_031_),
    .B(_069_),
    .Y(_000_[5])
  );
  NOR _131_ (
    .A(_027_),
    .B(_036_),
    .Y(_070_)
  );
  NAND _132_ (
    .A(lane_1[6]),
    .B(_034_),
    .Y(_071_)
  );
  NAND _133_ (
    .A(lane_0[6]),
    .B(_032_),
    .Y(_072_)
  );
  NAND _134_ (
    .A(_071_),
    .B(_072_),
    .Y(_013_)
  );
  NOR _135_ (
    .A(_070_),
    .B(_013_),
    .Y(_014_)
  );
  NOR _136_ (
    .A(_031_),
    .B(_014_),
    .Y(_000_[6])
  );
  NOR _137_ (
    .A(_028_),
    .B(_036_),
    .Y(_015_)
  );
  NAND _138_ (
    .A(lane_1[7]),
    .B(_034_),
    .Y(_016_)
  );
  NAND _139_ (
    .A(lane_0[7]),
    .B(_032_),
    .Y(_017_)
  );
  NAND _140_ (
    .A(_016_),
    .B(_017_),
    .Y(_018_)
  );
  NOR _141_ (
    .A(_015_),
    .B(_018_),
    .Y(_019_)
  );
  NOR _142_ (
    .A(_031_),
    .B(_019_),
    .Y(_000_[7])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _143_ (
    .C(clk_2f),
    .D(_001_),
    .Q(selector)
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _144_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_out[0])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _145_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_out[1])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _146_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_out[2])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _147_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_out[3])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _148_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_out[4])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _149_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_out[5])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _150_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_out[6])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _151_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_out[7])
  );
  (* src = "unstriping_synth.v:13" *)
  DFF _152_ (
    .C(clk_2f),
    .D(_002_),
    .Q(valid_out)
  );
  assign _012_ = _002_;
  assign _011_ = _001_;
  assign _003_ = _000_[0];
  assign _004_ = _000_[1];
  assign _005_ = _000_[2];
  assign _006_ = _000_[3];
  assign _007_ = _000_[4];
  assign _008_ = _000_[5];
  assign _009_ = _000_[6];
  assign _010_ = _000_[7];
  assign contador = 1'h0;
endmodule
